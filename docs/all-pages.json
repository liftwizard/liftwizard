[{"type":"Page","content":[{"id":"liftwizard","additionalIds":[],"title":"Liftwizard","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Liftwizard is a collection of bundles and add-ons for ","type":"SimpleText"},{"url":"https://www.dropwizard.io/","isFile":false,"type":"Link","content":[{"text":"Dropwizard","type":"SimpleText"}]},{"text":", the Java framework for writing web services.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"There are very few dependencies between the bundles, so you can pick and choose the ones you want.","type":"SimpleText"}]},{"id":"liftwizard-module-groups","additionalIds":["module-groups"],"level":2,"title":"Module groups","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"The bundles can be loosely grouped into categories.","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Dropwizard configuration","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"JSON serialization/deserialization","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Servlet client/server logging","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"GraphQL utility","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"url":"https://github.com/goldmansachs/reladomo","isFile":false,"type":"Link","content":[{"text":"Reladomo","type":"SimpleText"}]},{"text":" ORM integration for Dropwizard","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Other Dropwizard utility","type":"SimpleText"}]}]}]},{"id":"liftwizard-guide-structure","additionalIds":["guide-structure"],"level":2,"title":"Guide structure","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"In this guide, we'll start with the application ","type":"SimpleText"},{"url":"https://github.com/dropwizard/dropwizard/tree/master/dropwizard-example","isFile":false,"type":"Link","content":[{"code":"dropwizard-example","type":"InlinedCode"}]},{"text":" which is a maven module that's part of the main Dropwizard repository. We'll gradually turn it into ","type":"SimpleText"},{"url":"https://github.com/liftwizard/liftwizard/tree/master/liftwizard-example","isFile":false,"type":"Link","content":[{"code":"liftwizard-example","type":"InlinedCode"}]},{"text":", an application with an identical service api that uses as many Liftwizard features as possible.","type":"SimpleText"}]}]}],"lastModifiedTime":1761257089695,"tocItem":{"chapterTitle":"","pageTitle":"","pageMeta":{},"dirName":"","fileName":"index","fileExtension":"","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Liftwizard","id":"liftwizard","customAnchorId":"liftwizard"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Liftwizard is a collection of bundles and add-ons for ","type":"SimpleText"},{"url":"https://www.dropwizard.io/","isFile":false,"type":"Link","content":[{"text":"Dropwizard","type":"SimpleText"}]},{"text":", the Java framework for writing web services.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"There are very few dependencies between the bundles, so you can pick and choose the ones you want.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The bundles can be loosely grouped into categories:","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Dropwizard configuration and bundles","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Jackson JSON serialization/deserialization","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Servlet client/server logging","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"url":"https://github.com/goldmansachs/reladomo","isFile":false,"type":"Link","content":[{"text":"Reladomo","type":"SimpleText"}]},{"text":" ORM integration for Dropwizard","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"JUnit 4 and JUnit 5 test utilities","type":"SimpleText"}]}]}]}],"lastModifiedTime":1761257089695,"tocItem":{"chapterTitle":"Introduction","pageTitle":"Liftwizard","pageMeta":{},"dirName":"introduction","fileName":"liftwizard","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"EnvironmentConfigBundle","type":"InlinedCode"},{"text":" supports environment variable substitution inside Dropwizard configuration files.","type":"SimpleText"}]},{"id":"in-example-applications","additionalIds":[],"title":"in example applications","type":"Section","content":[{"type":"Paragraph","content":[{"text":"In the example applications, environment variable substitution is used for ","type":"SimpleText"},{"code":"defaultName","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"yaml","snippet":"template: Hello, %s!\ndefaultName: ${DW_DEFAULT_NAME:-Stranger}","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"We can see this in action by running the ","type":"SimpleText"},{"code":"render","type":"InlinedCode"},{"text":" command, with and without the environment variable set.","type":"SimpleText"}]},{"lang":"bash","snippet":"$ java -jar target/liftwizard-example-0.1.0.jar render example.yml --include-default\nINFO  [2020-05-02 03:07:41,910] com.example.helloworld.cli.RenderCommand: DEFAULT => Hello, Stranger!\n$ DW_DEFAULT_NAME=EnvSubstitution java -jar target/liftwizard-example-0.1.0.jar render example.yml --include-default\nINFO  [2020-05-02 03:08:05,685] com.example.helloworld.cli.RenderCommand: DEFAULT => Hello, EnvSubstitution!","lineNumber":"","type":"Snippet"}]},{"id":"in-dropwizard-example","additionalIds":[],"title":"in dropwizard-example","type":"Section","content":[{"lang":"java","snippet":"@Override\npublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n    // Enable variable substitution with environment variables\n    bootstrap.setConfigurationSourceProvider(\n            new SubstitutingSourceProvider(\n                    bootstrap.getConfigurationSourceProvider(),\n                    new EnvironmentVariableSubstitutor(false)\n            )\n    );\n\n    // ...\n}","lineNumber":"","type":"Snippet"}]},{"id":"in-liftwizard-example","additionalIds":[],"title":"in liftwizard-example","type":"Section","content":[{"lang":"java","snippet":"@Override\npublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n    bootstrap.addBundle(new EnvironmentConfigBundle());\n    // ...\n}","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"code":"EnvironmentConfigBundle","type":"InlinedCode"},{"text":" lives in the ","type":"SimpleText"},{"code":"liftwizard-bundle-environment-config","type":"InlinedCode"},{"text":" module.","type":"SimpleText"}]},{"lang":"xml","snippet":"<dependency>\n    <groupId>io.liftwizard</groupId>\n    <artifactId>liftwizard-bundle-environment-config</artifactId>\n</dependency>","lineNumber":"","type":"Snippet"}]}],"lastModifiedTime":1761257089695,"tocItem":{"chapterTitle":"Configuration","pageTitle":"Environment Variable Substitution","pageMeta":{},"dirName":"configuration","fileName":"environment-variable-substitution","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"in example applications","id":"in-example-applications","customAnchorId":"in-example-applications"},{"title":"in dropwizard-example","id":"in-dropwizard-example","customAnchorId":"in-dropwizard-example"},{"title":"in liftwizard-example","id":"in-liftwizard-example","customAnchorId":"in-liftwizard-example"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Dropwizard's configuration is specified in yaml by default. While yaml has nice properties, you may prefer json or some other format.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Dropwizard's ","type":"SimpleText"},{"url":"https://www.dropwizard.io/en/latest/manual/core.html#configuration","isFile":false,"type":"Link","content":[{"text":"documentation","type":"SimpleText"}]},{"text":" claims:","type":"SimpleText"}]},{"type":"BlockQuote","content":[{"type":"Paragraph","content":[{"text":"If your configuration file doesn't end in .yml or .yaml, Dropwizard tries to parse it as a JSON file.","type":"SimpleText"}]}]},{"type":"Paragraph","content":[{"text":"This is easily disproved by renaming example.yml to example.json and trying to run the application. It will incorrectly start without error.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Since json syntax is a subset of yml syntax, you can go ahead and convert your configuration file to json without changing the file extension from yaml or yml. However, this approach doesn't prevent you from accidentally using yaml syntax.","type":"SimpleText"}]},{"id":"configuration-through-json5-instead-of-yaml","additionalIds":[],"title":"Configuration through json5 instead of yaml","type":"Section","content":[{"type":"Paragraph","content":[{"text":"You can change your application to use json for its configuration using ","type":"SimpleText"},{"code":"JsonConfigurationFactoryFactory","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"java","snippet":"@Override\npublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n    bootstrap.setConfigurationFactoryFactory(new JsonConfigurationFactoryFactory<>());\n    // ...\n}","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"code":"JsonConfigurationFactoryFactory","type":"InlinedCode"},{"text":" uses json5 syntax by default, using optional features in Jackson. So you'll still be able to include comments inside your configuration files.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"After adding the bundle, you'll have to convert your configuration files to json5 and rename them. So ","type":"SimpleText"},{"code":"example.yml","type":"InlinedCode"},{"text":" becomes ","type":"SimpleText"},{"code":"example.json5","type":"InlinedCode"},{"text":". Configuration files used in ","type":"SimpleText"},{"code":"DropwizardAppRule","type":"InlinedCode"},{"text":" / ","type":"SimpleText"},{"code":"DropwizardAppExtension","type":"InlinedCode"},{"text":" tests must be converted as well. So ","type":"SimpleText"},{"code":"src/test/resources/test-example.yml","type":"InlinedCode"},{"text":" becomes ","type":"SimpleText"},{"code":"src/test/resources/test-example.json5","type":"InlinedCode"}]}]},{"id":"adding-the-dependency","additionalIds":[],"title":"Adding the dependency","type":"Section","content":[{"type":"Paragraph","content":[{"code":"JsonConfigurationFactoryFactory","type":"InlinedCode"},{"text":" lives in the ","type":"SimpleText"},{"code":"liftwizard-configuration-factory-json","type":"InlinedCode"},{"text":" module.","type":"SimpleText"}]},{"lang":"xml","snippet":"<dependency>\n    <groupId>io.liftwizard</groupId>\n    <artifactId>liftwizard-configuration-factory-json</artifactId>\n</dependency>","lineNumber":"","type":"Snippet"}]}],"lastModifiedTime":1761257089695,"tocItem":{"chapterTitle":"Configuration","pageTitle":"Json5 Configuration","pageMeta":{},"dirName":"configuration","fileName":"json5-configuration","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Configuration through json5 instead of yaml","id":"configuration-through-json5-instead-of-yaml","customAnchorId":"configuration-through-json5-instead-of-yaml"},{"title":"Adding the dependency","id":"adding-the-dependency","customAnchorId":"adding-the-dependency"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"ConfigLoggingBundle","type":"InlinedCode"},{"text":" logs the Dropwizard configuration using SLF4J. It serializes the in-memory configuration object to json and logs that json, not the contents of the original configuration file. The output contains default values set by constructors, that were not specified in the original configuration file.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To turn it on, add ","type":"SimpleText"},{"code":"ConfigLoggingBundle","type":"InlinedCode"},{"text":" to the list of registered bundles.","type":"SimpleText"}]},{"lang":"java","snippet":"@Override\npublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n    bootstrap.setConfigurationFactoryFactory(new JsonConfigurationFactoryFactory<>());\n    bootstrap.addBundle(new EnvironmentConfigBundle());\n\n    bootstrap.addBundle(new ObjectMapperBundle());\n    bootstrap.addBundle(new ConfigLoggingBundle());\n\n    StructuredArgumentsMDCLogger structuredLogger = new StructuredArgumentsMDCLogger(bootstrap.getObjectMapper());\n    bootstrap.addBundle(new JerseyHttpLoggingBundle(structuredLogger));\n\n    bootstrap.addBundle(new ClockBundle());\n    bootstrap.addBundle(new UUIDBundle());\n\n    bootstrap.addBundle(new H2Bundle());\n    bootstrap.addBundle(new ConnectionManagerHolderBundle());\n    bootstrap.addBundle(new ReladomoBundle());\n\n    bootstrap.addCommand(new RenderCommand());\n    bootstrap.addBundle(new AssetsBundle());\n    bootstrap.addBundle(\n        new MigrationsBundle<>() {\n            @Override\n            public DataSourceFactory getDataSourceFactory(HelloWorldConfiguration configuration) {\n                return configuration.getNamedDataSourcesFactory().getNamedDataSourceFactoryByName(\"h2-tcp\");\n            }\n        }\n    );\n    bootstrap.addBundle(new LiftwizardLiquibaseMigrationBundle());\n    bootstrap.addBundle(\n        new ViewBundle<>() {\n            @Override\n            public Map<String, Map<String, String>> getViewConfiguration(HelloWorldConfiguration configuration) {\n                return configuration.getViewRendererConfiguration();\n            }\n        }\n    );\n    bootstrap.addBundle(new Slf4jUncaughtExceptionHandlerBundle());\n    bootstrap.addBundle(new AuthFilterBundle());\n}","entry":"initialize","readMore":true,"readMoreVisibleLines":8,"type":"Snippet"},{"type":"Paragraph","content":[{"text":"Now ","type":"SimpleText"},{"code":"HelloWorldApplication","type":"InlinedCode"},{"text":" will log something like this on startup:","type":"SimpleText"}]},{"lang":"console","snippet":"INFO  12:53:29 [main]  {liftwizard.priority=-8, liftwizard.bundle=ConfigLoggingBundle} io.liftwizard.dropwizard.bundle.config.logging.ConfigLoggingBundle: Inferred Dropwizard configuration:","lineNumber":"","type":"Snippet"},{"lang":"json5","snippet":"{\n  template: \"Hello, %s!\",\n  defaultName: \"Stranger\",\n  configLogging: {\n    enabled: true,\n  },\n  // ...\n  metrics: {\n    frequency: \"1 minute\",\n    reporters: [],\n  },\n}","lineNumber":"","title":"Output configuration","anchorId":"output-configuration","type":"Snippet"},{"title":"Original configuration","include":"$['configLogging', 'template', 'metrics']","data":{"configLogging":{"enabled":true},"template":"Hello, %s!"},"highlightValues":[],"highlightKeys":[],"anchorId":"original-configuration","type":"Json"},{"type":"Paragraph","content":[{"text":"Note that the ","type":"SimpleText"},{"code":"metrics","type":"InlinedCode"},{"text":" section at the end was not specified in ","type":"SimpleText"},{"code":"test-example.json5","type":"InlinedCode"},{"text":". It comes from serializing the output of ","type":"SimpleText"},{"code":"io.dropwizard.Configuration.getMetricsFactory()","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"java","snippet":"@JsonProperty(\"metrics\")\npublic MetricsFactory getMetricsFactory() {\n    return metrics;\n}","title":"io.dropwizard.Configuration","entry":"getMetricsFactory","anchorId":"iodropwizardconfiguration","type":"Snippet"},{"type":"Paragraph","content":[{"text":"This output can be helpful for fleshing out the configuration file with default options. Including \"redundant\" defaults makes it easier to edit the configuration by hand. It's easier to flip a boolean flag from ","type":"SimpleText"},{"code":"false","type":"InlinedCode"},{"text":" to ","type":"SimpleText"},{"code":"true","type":"InlinedCode"},{"text":" than to first figure out where in the configuration file it belongs and the exact spelling of its key.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"ConfigLoggingBundle","type":"InlinedCode"},{"text":" also logs the \"default\" configuration at the ","type":"SimpleText"},{"code":"DEBUG","type":"InlinedCode"},{"text":" level. It does this by instantiating a new copy of the configuration class using the default no-arg constructor, serializing it to json, and logging it. The default configuration output can be useful for finding redundant configuration to remove.","type":"SimpleText"}]},{"id":"adding-the-dependency","additionalIds":[],"title":"Adding the dependency","type":"Section","content":[{"type":"Paragraph","content":[{"code":"ConfigLoggingBundle","type":"InlinedCode"},{"text":" lives in the ","type":"SimpleText"},{"code":"liftwizard-bundle-logging-config","type":"InlinedCode"},{"text":" module.","type":"SimpleText"}]},{"lang":"xml","snippet":"<dependency>\n    <groupId>io.liftwizard</groupId>\n    <artifactId>liftwizard-bundle-logging-config</artifactId>\n</dependency>","lineNumber":"","type":"Snippet"}]}],"lastModifiedTime":1761257089695,"tocItem":{"chapterTitle":"Configuration","pageTitle":"ConfigLoggingBundle","pageMeta":{},"dirName":"configuration","fileName":"ConfigLoggingBundle","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Adding the dependency","id":"adding-the-dependency","customAnchorId":"adding-the-dependency"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"ObjectMapperBundle","type":"InlinedCode"},{"text":" configures the Jackson ","type":"SimpleText"},{"code":"ObjectMapper","type":"InlinedCode"},{"text":" used by Dropwizard for serializing and deserializing all responses, as well as for logging by bundles such as ","type":"SimpleText"},{"code":"liftwizard-bundle-logging-config","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"ObjectMapperBundle","type":"InlinedCode"},{"text":" supports configuring pretty-printing on or off, and serialization inclusion to any value in Jackson's ","type":"SimpleText"},{"code":"JsonInclude.Include","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"ObjectMapperBundle","type":"InlinedCode"},{"text":" also turns on all json5 features, turns on ","type":"SimpleText"},{"code":"FAIL_ON_UNKNOWN_PROPERTIES","type":"InlinedCode"},{"text":", turns on ","type":"SimpleText"},{"code":"STRICT_DUPLICATE_DETECTION","type":"InlinedCode"},{"text":", and turns on serialization of dates and Strings.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To turn it on, add ","type":"SimpleText"},{"code":"ObjectMapperBundle","type":"InlinedCode"},{"text":" to the list of registered bundles.","type":"SimpleText"}]},{"lang":"java","snippet":"@Override\npublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n    // JsonConfigurationFactoryFactory uses a separate ObjectMapper, and can be configured earlier\n    bootstrap.setConfigurationFactoryFactory(new JsonConfigurationFactoryFactory<>());\n    bootstrap.addBundle(new EnvironmentConfigBundle());\n\n    bootstrap.addBundle(new ObjectMapperBundle());\n\n    // ConfigLoggingBundle uses the ObjectMapper configured by ObjectMapperBundle\n    bootstrap.addBundle(new ConfigLoggingBundle());\n\n    // ...\n}","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"You'll be able to see that ","type":"SimpleText"},{"code":"ObjectMapperBundle","type":"InlinedCode"},{"text":" is working because the output of ","type":"SimpleText"},{"code":"ConfigLoggingBundle","type":"InlinedCode"},{"text":" will now be pretty-printed by default.","type":"SimpleText"}]},{"id":"adding-the-dependency","additionalIds":[],"title":"Adding the dependency","type":"Section","content":[{"type":"Paragraph","content":[{"code":"ObjectMapperBundle","type":"InlinedCode"},{"text":" lives in the ","type":"SimpleText"},{"code":"liftwizard-bundle-object-mapper","type":"InlinedCode"},{"text":" module.","type":"SimpleText"}]},{"lang":"xml","snippet":"<dependency>\n    <groupId>io.liftwizard</groupId>\n    <artifactId>liftwizard-bundle-object-mapper</artifactId>\n</dependency>","lineNumber":"","type":"Snippet"}]}],"lastModifiedTime":1761257089695,"tocItem":{"chapterTitle":"Jackson","pageTitle":"ObjectMapperBundle","pageMeta":{},"dirName":"jackson","fileName":"ObjectMapperBundle","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Adding the dependency","id":"adding-the-dependency","customAnchorId":"adding-the-dependency"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"JerseyHttpLoggingBundle","type":"InlinedCode"},{"text":" is an alternative to Jersey's ","type":"SimpleText"},{"code":"LoggingFeature","type":"InlinedCode"},{"text":". Jersey's ","type":"SimpleText"},{"code":"LoggingFeature","type":"InlinedCode"},{"text":" can be configured to log or not log bodies, but it cannot be configured to exclude headers. Since headers can include authentication tokens, you may not want to log headers, or only log those in an allow-list.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The bundle can be configured:","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"include/exclude request bodies","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"include/exclude response bodies","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"allow-list of headers","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"include/exclude the list of excluded header ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"names","type":"SimpleText"}]}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"the max body size before truncation","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"Through code, the bundle can be configured to log using different combinations of slf4j/log4j/logback with context in MDC or OpenTracing or a Map.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To turn it on, add ","type":"SimpleText"},{"code":"JerseyHttpLoggingBundle","type":"InlinedCode"},{"text":" to the list of registered bundles.","type":"SimpleText"}]},{"lang":"java","snippet":"@Override\npublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap) {\n    bootstrap.setConfigurationFactoryFactory(new JsonConfigurationFactoryFactory<>());\n    bootstrap.addBundle(new EnvironmentConfigBundle());\n\n    bootstrap.addBundle(new ObjectMapperBundle());\n    bootstrap.addBundle(new ConfigLoggingBundle());\n\n    StructuredArgumentsMDCLogger structuredLogger = new StructuredArgumentsMDCLogger(bootstrap.getObjectMapper());\n    bootstrap.addBundle(new JerseyHttpLoggingBundle(structuredLogger));\n\n    // ...\n}","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"The bundle registers filters which gather all the arguments to log. A \"logger\" is passed into the constructor which abstracts over whether the logging uses logback or log4j, whether the structured arguments are converted into MDC, Markers, or a Map. The ","type":"SimpleText"},{"code":"StructuredArgumentsMDCLogger","type":"InlinedCode"},{"text":" in the example above logs using slf4j with context in MDC.","type":"SimpleText"}]},{"lang":"java","snippet":"var mdcLogger = new StructuredArgumentsMDCLogger(bootstrap.getObjectMapper());\nvar logstashLogger = new StructuredArgumentsLogstashEncoderLogger();\n\nConsumer<StructuredArguments> structuredLogger = structuredArguments ->\n{\n    mdcLogger.accept(structuredArguments);\n    logstashLogger.accept(structuredArguments);\n};\n\nbootstrap.addBundle(new JerseyHttpLoggingBundle(structuredLogger));","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"code":"JerseyHttpLoggingBundle","type":"InlinedCode"},{"text":" lives in the ","type":"SimpleText"},{"code":"liftwizard-bundle-logging-http","type":"InlinedCode"},{"text":" module.","type":"SimpleText"}]},{"lang":"xml","snippet":"<dependency>\n    <groupId>io.liftwizard</groupId>\n    <artifactId>liftwizard-bundle-logging-http</artifactId>\n</dependency>","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"In order to see the logging in action, we'll need to configure a log format that includes mdc and markers.","type":"SimpleText"}]},{"id":"test-examplejson5","additionalIds":[],"level":3,"title":"test-example.json5","type":"SubHeading"},{"type":"Paragraph","content":[{"code":"src/test/resources/test-example.json5","type":"InlinedCode"}]},{"lang":"json5","snippet":"{\n  type: \"console\",\n  timeZone: \"${LOGGING_TIMEZONE:-system}\",\n  logFormat: \"%highlight(%-5level) %cyan(%date{HH:mm:ss.SSS, %dwTimeZone}) %gray(\\\\(%file:%line\\\\)) [%white(%thread)] %blue(%marker) {%magenta(%mdc)} %green(%logger): %message%n%rootException\",\n  includeCallerData: true,\n}","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Next, lets turn on all the basic filters and see how they change what gets logged.","type":"SimpleText"}]},{"id":"logging-output","additionalIds":[],"level":2,"title":"Logging output","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"We can rerun ","type":"SimpleText"},{"code":"IntegrationTest","type":"InlinedCode"},{"text":" and see the new logs in action.","type":"SimpleText"}]},{"lang":"console","snippet":"DEBUG 13:21:49 [dw-249] io.liftwizard.servlet.logging.mdc.StructuredArgumentsMDCLogger: Response sent <> <\nresponse.http.elapsedNanos=1000000000,\nrequest.http.method=GET,\nrequest.http.parameters.query.name=Dr. IntegrationTest,\nrequest.http.path.full=/hello-world,\nrequest.http.path.absolute=http://localhost:63842/hello-world,\nrequest.http.client.port=63855,\nrequest.http.headers.User-Agent=Jersey/2.25.1 (HttpUrlConnection 17.0.2),\nrequest.http.server.port=63842,\nrequest.http.client.host=127.0.0.1,\nrequest.resourceClass=com.example.helloworld.resources.HelloWorldResource,\nrequest.http.path.template=/hello-world,\nrequest.http.server.name=localhost,\nrequest.http.headers.Host=localhost:63842,\nresponse.http.headers.Content-Type=application/json,\nresponse.http.contentType=application/json,\nresponse.http.entityType=com.example.helloworld.api.Saying,\nresponse.http.status.code=200,\nrequest.http.client.address=127.0.0.1,\nrequest.resourceMethod=sayHello,\nresponse.http.status.phrase=OK,\nresponse.http.body={\n  \"id\" : 1,\n  \"content\" : \"Hello, Dr. IntegrationTest!\"\n},\nresponse.http.contentLength=59,\nrequest.http.server.scheme=http,\nresponse.http.status.status=OK,\nresponse.http.status.family=SUCCESSFUL>","lineNumber":"","title":"Logging output (newlines added for clarity)","anchorId":"logging-output-logging-output-newlines-added-for-clarity","type":"Snippet"},{"id":"logstash-encoder","additionalIds":[],"level":2,"title":"Logstash encoder","type":"SubHeading"},{"type":"Paragraph","content":[{"code":"liftwizard-config-logging-logstash-file","type":"InlinedCode"},{"text":" is a Dropwizard ","type":"SimpleText"},{"code":"AppenderFactory","type":"InlinedCode"},{"text":". It sets up a file appender that logs one json object per log statement. The json is formatted by ","type":"SimpleText"},{"url":"https://github.com/logstash/logstash-logback-encoder","isFile":false,"type":"Link","content":[{"text":"logstash-logback-encoder","type":"SimpleText"}]},{"text":" and is ready to be parsed by logstash.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Let's add the logstash-file appender to the list of configured appenders.","type":"SimpleText"}]},{"id":"logstash-encoder-test-examplejson5","additionalIds":["test-examplejson5-3"],"level":3,"title":"test-example.json5","type":"SubHeading"},{"type":"Paragraph","content":[{"code":"src/test/resources/test-example.json5","type":"InlinedCode"}]},{"lang":"json5","snippet":"{\n  // ...\n  logging: {\n    level: \"DEBUG\",\n    appenders: [\n      {\n        type: \"console\",\n        timeZone: \"${LOGGING_TIMEZONE:-system}\",\n        logFormat: \"%highlight(%-5level) %cyan(%date{HH:mm:ss.SSS, %dwTimeZone}) %gray(\\\\(%file:%line\\\\)) [%white(%thread)] %blue(%marker) {%magenta(%mdc)} %green(%logger): %message%n%rootException\",\n        includeCallerData: true,\n      },\n      {\n        type: \"file-logstash\",\n        currentLogFilename: \"./logs/logstash.jsonl\",\n        archivedLogFilenamePattern: \"./logs/logstash-%d.jsonl\",\n        includeCallerData: true,\n        encoder: {\n          includeContext: true,\n          includeMdc: true,\n          includeStructuredArguments: true,\n          includedNonStructuredArguments: true,\n          includeTags: true,\n          prettyPrint: false,\n        },\n      },\n    ],\n  },\n  // ...\n}","lineNumber":"","type":"Snippet"},{"id":"logstash-encoder-logstashjsonl","additionalIds":["logstashjsonl"],"level":3,"title":"logstash.jsonl","type":"SubHeading"},{"type":"Paragraph","content":[{"code":"logs/logstash.jsonl","type":"InlinedCode"},{"text":" snippet","type":"SimpleText"}]},{"data":{"@timestamp":"1999-12-31T23:59:59.000-00:00","@version":"1","message":"Response sent","logger_name":"io.liftwizard.servlet.logging.mdc.StructuredArgumentsMDCLogger","thread_name":"dw-249","level":"DEBUG","level_value":10000,"response.http.elapsedNanos":"1000000000","request.http.method":"GET","request.http.parameters.query.name":"Dr. IntegrationTest","request.http.path.full":"/hello-world","request.http.path.absolute":"http://localhost:63842/hello-world","request.http.client.port":"63855","request.http.headers.User-Agent":"Jersey/2.25.1 (HttpUrlConnection 17.0.2)","request.http.server.port":"63842","request.http.client.host":"127.0.0.1","request.resourceClass":"com.example.helloworld.resources.HelloWorldResource","request.http.path.template":"/hello-world","request.http.server.name":"localhost","request.http.headers.Host":"localhost:63842","response.http.headers.Content-Type":"application/json","response.http.contentType":"application/json","response.http.entityType":"com.example.helloworld.api.Saying","response.http.status.code":"200","request.http.client.address":"127.0.0.1","request.resourceMethod":"sayHello","response.http.status.phrase":"OK","response.http.body":"{\n  \"id\" : 1,\n  \"content\" : \"Hello, Dr. IntegrationTest!\"\n}","response.http.contentLength":"59","request.http.server.scheme":"http","response.http.status.status":"OK","response.http.status.family":"SUCCESSFUL","caller_class_name":"io.liftwizard.servlet.logging.mdc.StructuredArgumentsMDCLogger","caller_method_name":"accept","caller_file_name":"StructuredArgumentsMDCLogger.java","caller_line_number":56},"highlightValues":[],"highlightKeys":[],"type":"Json"}],"lastModifiedTime":1761257089695,"tocItem":{"chapterTitle":"Logging","pageTitle":"JerseyHttpLoggingBundle","pageMeta":{},"dirName":"logging","fileName":"JerseyHttpLoggingBundle","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"In unit tests, it can be useful to suppress all logging for successful tests, but still log everything when tests fail.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"In order to accomplish this, we need to buffer all logging before we know the result of the test, and then flush or clear the buffer once we know the outcome.","type":"SimpleText"}]},{"id":"bufferedappender","additionalIds":[],"level":2,"title":"BufferedAppender","type":"SubHeading"},{"type":"Paragraph","content":[{"code":"BufferedAppender","type":"InlinedCode"},{"text":" is the logback appender that buffers all logging until it receives a ","type":"SimpleText"},{"code":"CLEAR","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"FLUSH","type":"InlinedCode"},{"text":" marker.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"You can use directly in logback configuration. It requires a delegate appender for flushing, declared using an ","type":"SimpleText"},{"code":"appender-ref","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"title":"logback-test.xml","xmlAsJson":{"tagName":"configuration","attributes":[{"name":"packagingData","value":"\"true\""}],"children":[{"tagName":"appender","attributes":[{"name":"name","value":"\"Console\""},{"name":"class","value":"\"ch.qos.logback.core.ConsoleAppender\""}],"children":[{"tagName":"encoder","attributes":[],"children":[{"tagName":"pattern","attributes":[],"children":[{"tagName":"","text":"%highlight(%-5level) %cyan(%date{HH:mm:ss.SSS, ${LOGGING_TIMEZONE}}) %gray(\\(%file:%line\\)) [%white(%thread)] %blue(%marker) {%magenta(%mdc)} %green(%logger): %message%n%rootException"}]}]}]},{"tagName":"appender","attributes":[{"name":"name","value":"\"Buffered\""},{"name":"class","value":"\"io.liftwizard.logging.logback.appender.buffered.BufferedAppender\""}],"children":[{"tagName":"appender-ref","attributes":[{"name":"ref","value":"\"Console\""}],"children":[]}]},{"tagName":"root","attributes":[{"name":"level","value":"\"INFO\""}],"children":[{"tagName":"appender-ref","attributes":[{"name":"ref","value":"\"Buffered\""}],"children":[]}]}]},"paths":[],"type":"Xml"},{"type":"Paragraph","content":[{"code":"BufferedAppender","type":"InlinedCode"},{"text":" lives in the ","type":"SimpleText"},{"code":"liftwizard-logging-buffered-appender","type":"InlinedCode"},{"text":" module.","type":"SimpleText"}]},{"lang":"xml","snippet":"<dependency>\n    <groupId>io.liftwizard</groupId>\n    <artifactId>liftwizard-logging-buffered-appender</artifactId>\n    <scope>test</scope>\n</dependency>","lineNumber":"","type":"Snippet"},{"id":"log-markers","additionalIds":[],"level":2,"title":"Log Markers","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"We must log ","type":"SimpleText"},{"code":"CLEAR","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"FLUSH","type":"InlinedCode"},{"text":" markers to instruct ","type":"SimpleText"},{"code":"BufferedAppender","type":"InlinedCode"},{"text":" to clear or flush its logs. If you are using JUnit 4 or 5, you can use the included Rule or Extension to log these markers automatically.","type":"SimpleText"}]},{"default":"JUnit 5","tabsContent":[{"name":"JUnit 4","content":[{"type":"Paragraph","content":[{"code":"LogMarkerTestRule","type":"InlinedCode"},{"text":" is a JUnit 4 ","type":"SimpleText"},{"code":"Rule","type":"InlinedCode"},{"text":" that clears the buffer before all tests and flushes the buffer after failed tests. It does this by logging ","type":"SimpleText"},{"code":"CLEAR","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"FLUSH","type":"InlinedCode"},{"text":" markers.","type":"SimpleText"}]},{"lang":"java","snippet":"public class ExampleTest\n{\n    @Rule\n    public final TestRule logMarkerTestRule = new LogMarkerTestRule();\n\n    @Test\n    public void smokeTest()\n    {\n        // test code\n    }\n}","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"code":"LogMarkerTestRule","type":"InlinedCode"},{"text":" lives in the ","type":"SimpleText"},{"code":"liftwizard-junit-rule-log-marker","type":"InlinedCode"},{"text":" module.","type":"SimpleText"}]},{"lang":"xml","snippet":"<dependency>\n    <groupId>io.liftwizard</groupId>\n    <artifactId>liftwizard-junit-rule-log-marker</artifactId>\n    <scope>test</scope>\n</dependency>","lineNumber":"","type":"Snippet"}]},{"name":"JUnit 5","content":[{"type":"Paragraph","content":[{"code":"LogMarkerTestExtension","type":"InlinedCode"},{"text":" is a JUnit 5 ","type":"SimpleText"},{"code":"Extension","type":"InlinedCode"},{"text":" that clears the buffer before all tests and flushes the buffer after failed tests. It does this by logging ","type":"SimpleText"},{"code":"CLEAR","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"FLUSH","type":"InlinedCode"},{"text":" markers.","type":"SimpleText"}]},{"lang":"java","snippet":"@ExtendWith(LogMarkerTestExtension.class)\npublic class ExampleTest\n{\n    @Test\n    public void smokeTest()\n    {\n        // test code\n    }\n}","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"code":"LogMarkerTestExtension","type":"InlinedCode"},{"text":" lives in the ","type":"SimpleText"},{"code":"liftwizard-junit-extension-log-marker","type":"InlinedCode"},{"text":" module.","type":"SimpleText"}]},{"lang":"xml","snippet":"<dependency>\n    <groupId>io.liftwizard</groupId>\n    <artifactId>liftwizard-junit-extension-log-marker</artifactId>\n    <scope>test</scope>\n</dependency>","lineNumber":"","type":"Snippet"}]}],"defaultTabIdx":1,"type":"Tabs"},{"id":"bufferedappenderfactory","additionalIds":[],"level":2,"title":"BufferedAppenderFactory","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"BufferedAppenderFactory","type":"InlinedCode"},{"text":" allows you to use an appender with the type ","type":"SimpleText"},{"code":"buffered","type":"InlinedCode"},{"text":" where you would otherwise use ","type":"SimpleText"},{"code":"console","type":"InlinedCode"},{"text":" in your Dropwizard configuration.","type":"SimpleText"}]},{"lang":"json5","snippet":"\"logging\": {\n  \"level\": \"DEBUG\",\n  \"appenders\": [\n    {\n      \"type\": \"buffered\",\n      \"timeZone\": \"${LOGGING_TIMEZONE:-system}\",\n      \"logFormat\": \"%highlight(%-5level) %cyan(%date{HH:mm:ss.SSS, %dwTimeZone}) %gray(\\\\(%file:%line\\\\)) [%white(%thread)] %blue(%marker) {%magenta(%mdc)} %green(%logger): %message%n%rootException\",\n      \"includeCallerData\": true,\n    },\n  ]\n}","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"code":"BufferedAppenderFactory","type":"InlinedCode"},{"text":" lives in the ","type":"SimpleText"},{"code":"liftwizard-config-logging-buffered","type":"InlinedCode"},{"text":" module.","type":"SimpleText"}]},{"lang":"xml","snippet":"<dependency>\n    <groupId>io.liftwizard</groupId>\n    <artifactId>liftwizard-config-logging-buffered</artifactId>\n    <scope>test</scope>\n</dependency>","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Note: ","type":"SimpleText"},{"code":"BufferedAppenderFactory","type":"InlinedCode"},{"text":" is primarily useful for tests that use ","type":"SimpleText"},{"url":"https://www.dropwizard.io/en/release-2.1.x/manual/testing.html#junit-4","isFile":false,"type":"Link","content":[{"text":"Dropwizard's JUnit 4 Rule","type":"SimpleText"}]},{"text":" ","type":"SimpleText"},{"code":"DropwizardAppRule","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"url":"https://www.dropwizard.io/en/release-2.1.x/manual/testing.html#junit-5","isFile":false,"type":"Link","content":[{"text":"Dropwizard's JUnit 5 Extension","type":"SimpleText"}]},{"text":" ","type":"SimpleText"},{"code":"DropwizardAppExtension","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"default":"JUnit 5","tabsContent":[{"name":"JUnit 4","content":[{"type":"Paragraph","content":[{"code":"LogMarkerTestRule","type":"InlinedCode"},{"text":" needs to be an inner rule when used together with DropwizardAppRule. Both rules tear down logging, and ","type":"SimpleText"},{"code":"LogMarkerTestRule","type":"InlinedCode"},{"text":" needs to perform its tear down first, to flush its contents to the console.","type":"SimpleText"}]},{"lang":"java","snippet":"private final TestRule logMarkerTestRule = new LogMarkerTestRule();\n\nprivate final DropwizardAppRule<MyAppConfiguration> dropwizardAppRule = new DropwizardAppRule<>(\n        MyApplication.class,\n        ResourceHelpers.resourceFilePath(\"test-example.json5\"));\n\n@Rule\npublic final RuleChain ruleChain = RuleChain\n        .outerRule(this.dropwizardAppRule)\n        .around(this.logMarkerTestRule);","lineNumber":"","type":"Snippet"}]},{"name":"JUnit 5","content":[{"type":"Paragraph","content":[{"code":"LogMarkerTestExtension","type":"InlinedCode"},{"text":" was used as an annotation in the previous example. When used together with ","type":"SimpleText"},{"code":"DropwizardAppExtension","type":"InlinedCode"},{"text":", it ought to be a field to control execution order. Both extensions tear down logging, and ","type":"SimpleText"},{"code":"LogMarkerTestExtension","type":"InlinedCode"},{"text":" needs to perform its tear down first, to flush its contents to the console.","type":"SimpleText"}]},{"lang":"java","snippet":"@RegisterExtension\nfinal DropwizardAppExtension<MyAppConfiguration> dropwizardAppExtension = new DropwizardAppExtension<>(\n        MyApplication.class,\n        ResourceHelpers.resourceFilePath(\"test-example.json5\"));\n\n@RegisterExtension\nfinal LogMarkerTestExtension logMarkerTestExtension = new LogMarkerTestExtension();","lineNumber":"","type":"Snippet"}]}],"defaultTabIdx":1,"type":"Tabs"}],"lastModifiedTime":1761257089696,"tocItem":{"chapterTitle":"Logging","pageTitle":"Buffered Logging","pageMeta":{},"dirName":"logging","fileName":"buffered-logging","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Dropwizard comes with support for dynamic configuration of ","type":"SimpleText"},{"url":"https://www.dropwizard.io/en/latest/manual/core.html#logging-filters","isFile":false,"type":"Link","content":[{"text":"log filters","type":"SimpleText"}]},{"text":". However, it ships with just a single filter, the ","type":"SimpleText"},{"url":"https://www.dropwizard.io/en/latest/manual/core.html#filtering-request-logs-for-a-specific-uri","isFile":false,"type":"Link","content":[{"text":"UriFilterFactory","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]},{"type":"BlockQuote","content":[{"type":"Paragraph","content":[{"text":"One can create logging filters that will intercept log statements before they are written and decide if they’re allowed. Log filters can work on both regular statements and request log statements.","type":"SimpleText"}]}]},{"type":"Paragraph","content":[{"text":"Liftwizard provides an improved ","type":"SimpleText"},{"code":"RequestUrlFilterFactory","type":"InlinedCode"},{"text":" for request logs and ","type":"SimpleText"},{"code":"JaninoFilterFactory","type":"InlinedCode"},{"text":" for plain logs.","type":"SimpleText"}]},{"id":"requesturlfilterfactory","additionalIds":[],"level":2,"title":"RequestUrlFilterFactory","type":"SubHeading"},{"type":"Paragraph","content":[{"code":"RequestUrlFilterFactory","type":"InlinedCode"},{"text":" is an improved version of ","type":"SimpleText"},{"code":"UriFilterFactory","type":"InlinedCode"},{"text":". It can filter access logs that do or don't match a list of urls.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To use it, add a dependency on ","type":"SimpleText"},{"code":"liftwizard-config-logging-filter-requesturl","type":"InlinedCode"},{"text":". Then add a filter factory to your config with type ","type":"SimpleText"},{"code":"url","type":"InlinedCode"},{"text":" and a list of ","type":"SimpleText"},{"code":"urls","type":"InlinedCode"},{"text":" to include or exclude. The default value of ","type":"SimpleText"},{"code":"onMatch","type":"InlinedCode"},{"text":" is ","type":"SimpleText"},{"code":"ch.qos.logback.core.spi.FilterReply.DENY","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"data":{"requestLog":{"appenders":[{"type":"console","filterFactories":[{"type":"url","onMatch":"DENY","urls":["/icons/","/static/","/manifest.json","/assets-manifest.json","/favicon.ico","/service-worker.js"]}]}]}},"highlightValues":[],"highlightKeys":[],"type":"Json"},{"id":"janinofilterfactory","additionalIds":[],"level":2,"title":"JaninoFilterFactory","type":"SubHeading"},{"type":"Paragraph","content":[{"code":"JaninoFilterFactory","type":"InlinedCode"},{"text":" allows you to specify the filter condition in a snippet of Java code that gets compiled with ","type":"SimpleText"},{"url":"https://janino-compiler.github.io/janino/","isFile":false,"type":"Link","content":[{"text":"Janino","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To use it, add a dependency on ","type":"SimpleText"},{"code":"liftwizard-config-logging-filter-janino","type":"InlinedCode"},{"text":". Then add a filter factory to your config with type ","type":"SimpleText"},{"code":"janino","type":"InlinedCode"},{"text":" and a ","type":"SimpleText"},{"code":"javaExpression","type":"InlinedCode"},{"text":" that evaluates to a boolean. The default value of ","type":"SimpleText"},{"code":"onMatch","type":"InlinedCode"},{"text":" is ","type":"SimpleText"},{"code":"ch.qos.logback.core.spi.FilterReply.DENY","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"json5","snippet":"{\n  logging: {\n    level: \"DEBUG\",\n    appenders: [\n      {\n        type: \"console\",\n        timeZone: \"${LOGGING_TIMEZONE:-system}\",\n        logFormat: \"%highlight(%-5level) %cyan(%date{HH:mm:ss.SSS, %dwTimeZone}) %gray(\\\\(%file:%line\\\\)) [%white(%thread)] %blue(%marker) {%magenta(%mdc)} %green(%logger): %message%n%rootException\",\n        filterFactories: [\n          {\n            type: \"janino\",\n            javaExpression: 'logger.equals(\"io.liftwizard.logging.p6spy.P6SpySlf4jLogger\") && mdc.get(\"liftwizard.bundle\").equals(\"DdlExecutorBundle\")',\n            onMatch: \"DENY\",\n          },\n        ],\n      },\n    ],\n  },\n}","lineNumber":"","type":"Snippet"}],"lastModifiedTime":1761257089696,"tocItem":{"chapterTitle":"Logging","pageTitle":"Filter Factories","pageMeta":{},"dirName":"logging","fileName":"filter-factories","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"code":"Slf4jUncaughtExceptionHandler","type":"InlinedCode"},{"text":" is an ","type":"SimpleText"},{"url":"https://docs.oracle.com/en%2Fjava%2Fjavase%2F21%2Fdocs%2Fapi%2F%2F/java.base/java/lang/Thread.UncaughtExceptionHandler.html","isFile":false,"type":"Link","content":[{"code":"UncaughtExceptionHandler","type":"InlinedCode"}]},{"text":" that logs uncaught exceptions using SLF4J.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"Slf4jUncaughtExceptionHandlerBundle","type":"InlinedCode"},{"text":" is a Dropwizard bundle that installs ","type":"SimpleText"},{"code":"Slf4jUncaughtExceptionHandler","type":"InlinedCode"},{"text":" on startup.","type":"SimpleText"}]},{"type":"BlockQuote","content":[{"type":"Paragraph","content":[{"text":"When a thread is about to terminate due to an uncaught exception the Java Virtual Machine will query the thread for its UncaughtExceptionHandler using Thread.getUncaughtExceptionHandler() and will invoke the handler's uncaughtException method, passing the thread and the exception as arguments.","type":"SimpleText"}]}]},{"id":"the-logs","additionalIds":[],"title":"The logs","type":"Section","content":[{"type":"Paragraph","content":[{"text":"When an uncaught exception is thrown, ","type":"SimpleText"},{"code":"Slf4jUncaughtExceptionHandler","type":"InlinedCode"},{"text":" logs the exception at the WARN level.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"With logback configuration like this:","type":"SimpleText"}]},{"lang":"xml","snippet":"<appender name=\"Console\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder>\n        <pattern>%highlight(%-5level) %cyan(%date{HH:mm:ss.SSS, ${LOGGING_TIMEZONE}}) %gray(\\(%file:%line\\)) [%white(%thread)] %blue(%marker) {%magenta(%mdc)} %green(%logger): %message%n%rootException</pattern>\n    </encoder>\n</appender>","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"The logs look like this:","type":"SimpleText"}]},{"lang":"console","snippet":"WARN  12:00:00.000 (Slf4jUncaughtExceptionHandler.java:46) [main]  {exceptionClass=io.liftwizard.logging.slf4j.uncaught.exception.handler.Slf4jUncaughtExceptionHandlerTest.RootException, liftwizard.error.message=example root, liftwizard.error.kind=io.liftwizard.logging.slf4j.uncaught.exception.handler.Slf4jUncaughtExceptionHandlerTest.RootException, threadName=main, exceptionMessage=example root, liftwizard.error.thread=main} io.liftwizard.logging.slf4j.uncaught.exception.handler.Slf4jUncaughtExceptionHandler: Exception in thread \"main\"\nio.liftwizard.logging.slf4j.uncaught.exception.handler.Slf4jUncaughtExceptionHandlerTest$CauseException: example cause\n\tat io.liftwizard.logging.slf4j.uncaught.exception.handler.Slf4jUncaughtExceptionHandlerTest.testUncaughtException(Slf4jUncaughtExceptionHandlerTest.java:26) ~[test-classes/:na]\n\t... 68 common frames omitted\nWrapped by: io.liftwizard.logging.slf4j.uncaught.exception.handler.Slf4jUncaughtExceptionHandlerTest$RootException: example root\n\tat io.liftwizard.logging.slf4j.uncaught.exception.handler.Slf4jUncaughtExceptionHandlerTest.testUncaughtException(Slf4jUncaughtExceptionHandlerTest.java:27) ~[test-classes/:na]","lineNumber":"","type":"Snippet"}]},{"id":"with-dropwizard","additionalIds":[],"title":"With Dropwizard","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To use the exception handler with Dropwizard, add ","type":"SimpleText"},{"code":"Slf4jUncaughtExceptionHandlerBundle","type":"InlinedCode"},{"text":" to the list of registered bundles.","type":"SimpleText"}]},{"lang":"java","snippet":"@Override\npublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap)\n{\n    bootstrap.addBundle(new Slf4jUncaughtExceptionHandlerBundle());\n}","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"And add the dependency:","type":"SimpleText"}]},{"lang":"xml","snippet":"<dependency>\n    <groupId>io.liftwizard</groupId>\n    <artifactId>liftwizard-bundle-logging-uncaught-exception-handler</artifactId>\n</dependency>","lineNumber":"","type":"Snippet"}]},{"id":"without-dropwizard","additionalIds":[],"title":"Without Dropwizard","type":"Section","content":[{"type":"Paragraph","content":[{"text":"To use ","type":"SimpleText"},{"code":"Slf4jUncaughtExceptionHandler","type":"InlinedCode"},{"text":" without the bundle, create an instance and set it as the default uncaught exception handler.","type":"SimpleText"}]},{"lang":"java","snippet":"Thread.setDefaultUncaughtExceptionHandler(new Slf4jUncaughtExceptionHandler());","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"And add the dependency:","type":"SimpleText"}]},{"lang":"xml","snippet":"<dependency>\n    <groupId>io.liftwizard</groupId>\n    <artifactId>liftwizard-logging-uncaught-exception-handler</artifactId>\n</dependency>","lineNumber":"","type":"Snippet"}]}],"lastModifiedTime":1761257089695,"tocItem":{"chapterTitle":"Logging","pageTitle":"Slf4jUncaughtExceptionHandlerBundle","pageMeta":{},"dirName":"logging","fileName":"Slf4jUncaughtExceptionHandlerBundle","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"The logs","id":"the-logs","customAnchorId":"the-logs"},{"title":"With Dropwizard","id":"with-dropwizard","customAnchorId":"with-dropwizard"},{"title":"Without Dropwizard","id":"without-dropwizard","customAnchorId":"without-dropwizard"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"LiftwizardGraphQLBundle","type":"InlinedCode"},{"text":" extends ","type":"SimpleText"},{"code":"com.smoketurner.dropwizard.graphql.GraphQLBundle","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The bundle registers ","type":"SimpleText"},{"url":"https://github.com/graphql/graphiql","isFile":false,"type":"Link","content":[{"text":"the GraphIQL UI","type":"SimpleText"}]},{"text":" at ","type":"SimpleText"},{"code":"/graphiql","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"url":"https://github.com/graphql/graphql-playground","isFile":false,"type":"Link","content":[{"text":"the GraphQL Playground UI","type":"SimpleText"}]},{"text":" at ","type":"SimpleText"},{"code":"/graphql-playground","type":"InlinedCode"},{"text":", by delegating to ","type":"SimpleText"},{"code":"AssetsBundle","type":"InlinedCode"},{"text":". This overrides the behavior of the smoketurner bundle, which registers just one UI at ","type":"SimpleText"},{"code":"/","type":"InlinedCode"},{"text":" (graphiql in older versions, and graphql-playground in newer versions).","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The bundle also registers two instrumentations for logging and metrics. If you choose not to use the bundle, you can still register the instrumentations separately.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To turn it on, add ","type":"SimpleText"},{"code":"LiftwizardGraphQLBundle","type":"InlinedCode"},{"text":" to the list of registered bundles.","type":"SimpleText"}]},{"lang":"java","snippet":"@Override\npublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap)\n{\n    bootstrap.setConfigurationFactoryFactory(new JsonConfigurationFactoryFactory<>());\n    bootstrap.addBundle(new EnvironmentConfigBundle());\n\n    bootstrap.addBundle(new ObjectMapperBundle());\n    bootstrap.addBundle(new ConfigLoggingBundle());\n\n    bootstrap.addBundle(new JerseyHttpLoggingBundle());\n\n    bootstrap.addBundle(new LiftwizardGraphQLBundle<>(\n            builder ->\n            {\n                // Set up GraphQL wiring\n                // builder.scalar(...);\n                // builder.type(...);\n            }));\n\n    // ...\n}","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"code":"LiftwizardGraphQLBundle","type":"InlinedCode"},{"text":" lives in the ","type":"SimpleText"},{"code":"liftwizard-bundle-graphql","type":"InlinedCode"},{"text":" module.","type":"SimpleText"}]},{"lang":"xml","snippet":"<dependency>\n    <groupId>io.liftwizard</groupId>\n    <artifactId>liftwizard-bundle-graphql</artifactId>\n</dependency>","lineNumber":"","type":"Snippet"}],"lastModifiedTime":1761257089695,"tocItem":{"chapterTitle":"Graphql","pageTitle":"Bundle","pageMeta":{},"dirName":"graphql","fileName":"bundle","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"code":"LiftwizardGraphQLLoggingInstrumentation","type":"InlinedCode"},{"text":" is an implementation of ","type":"SimpleText"},{"code":"Instrumentation","type":"InlinedCode"},{"text":" from ","type":"SimpleText"},{"url":"https://www.graphql-java.com/","isFile":false,"type":"Link","content":[{"text":"GraphQL Java","type":"SimpleText"}]},{"text":" that adds helpful context to slf4j's ","type":"SimpleText"},{"url":"http://www.slf4j.org/manual.html#mdc","isFile":false,"type":"Link","content":[{"text":"Mapped Diagnostic Context","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"For example, say that during the execution of a ","type":"SimpleText"},{"code":"DataFetcher","type":"InlinedCode"},{"text":", we execute a database query and log its sql. It would be helpful to see the query in the context of the DataFetcher that executed it, along with the GraphQL field and its type, and the path we took through the graph on the way to this field.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"This Instrumentation adds these fields to MDC, prefixed with ","type":"SimpleText"},{"code":"liftwizard.graphql","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To turn it on, either run the entire ","type":"SimpleText"},{"url":"/docs/graphql/bundle","isFile":false,"type":"Link","content":[{"code":"LiftwizardGraphQLBundle","type":"InlinedCode"}]},{"text":" or just add ","type":"SimpleText"},{"code":"LiftwizardGraphQLLoggingInstrumentation","type":"InlinedCode"},{"text":" to the list of instrumentations on your ","type":"SimpleText"},{"code":"GraphQLFactory","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"java","snippet":"GraphQLFactory factory = ...;\n\nvar loggingInstrumentation = new LiftwizardGraphQLLoggingInstrumentation();\n\nList<Instrumentation> instrumentations = List.of(loggingInstrumentation);\nfactory.setInstrumentations(instrumentations);","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Here's an example of what SQL logging might look like with MDC attached when formatted by the \"file-logstash\" appender.","type":"SimpleText"}]},{"data":{"@timestamp":"2020-11-26T21:03:23.010-05:00","@version":"1","message":"select t0.key,t0.title,t0.description_markdown,t0.imgur_image_id,t0.created_by_id,t0.created_on,t0.last_updated_by_id,t0.system_from,t0.system_to from BLUEPRINT t0 inner join FIREBASE_USER t1 on t0.created_by_id = t1.user_id where  t1.system_to = '9999-12-01T18:59:00.000-0500' and substr(t1.display_name,1,9) = 'factorioi' and t0.system_to = '9999-12-01T18:59:00.000-0500'","logger_name":"io.liftwizard.logging.p6spy.P6SpySlf4jLogger","thread_name":"dw-35 - POST /graphql","level":"INFO","level_value":20000,"liftwizard.graphql.executionId":"18905eb7-2d87-42b9-ad14-90856949dc4e","liftwizard.graphql.field.path":"/blueprintByOperation","liftwizard.graphql.field.parentType":"Query","liftwizard.graphql.field.name":"blueprintByOperation","liftwizard.graphql.field.type":"Blueprint","liftwizard.p6spy.connectionId":19,"liftwizard.p6spy.now":"2020-11-27T02:03:23.010Z","liftwizard.p6spy.elapsed":164,"liftwizard.p6spy.category":"statement","liftwizard.p6spy.prepared":"select t0.key,t0.title,t0.description_markdown,t0.imgur_image_id,t0.created_by_id,t0.created_on,t0.last_updated_by_id,t0.system_from,t0.system_to from BLUEPRINT t0 inner join FIREBASE_USER t1 on t0.created_by_id = t1.user_id where  t1.system_to = ? and substr(t1.display_name,1,9) = ? and t0.system_to = ?","liftwizard.p6spy.sql":"select t0.key,t0.title,t0.description_markdown,t0.imgur_image_id,t0.created_by_id,t0.created_on,t0.last_updated_by_id,t0.system_from,t0.system_to from BLUEPRINT t0 inner join FIREBASE_USER t1 on t0.created_by_id = t1.user_id where  t1.system_to = '9999-12-01T18:59:00.000-0500' and substr(t1.display_name,1,9) = 'factorioi' and t0.system_to = '9999-12-01T18:59:00.000-0500'","liftwizard.p6spy.url":"jdbc:p6spy:h2:tcp://localhost:9096/liftwizard-app-h2;NON_KEYWORDS=USER;query_timeout=600000","caller_class_name":"io.liftwizard.logging.p6spy.P6SpySlf4jLogger","caller_method_name":"logSQL","caller_file_name":"P6SpySlf4jLogger.java","caller_line_number":82},"highlightValues":[],"highlightKeys":[],"type":"Json"},{"type":"Paragraph","content":[{"code":"LiftwizardGraphQLLoggingInstrumentation","type":"InlinedCode"},{"text":" lives in the ","type":"SimpleText"},{"code":"liftwizard-graphql-instrumentation-logging","type":"InlinedCode"},{"text":" module.","type":"SimpleText"}]},{"lang":"xml","snippet":"<dependency>\n    <groupId>io.liftwizard</groupId>\n    <artifactId>liftwizard-graphql-instrumentation-logging</artifactId>\n</dependency>","lineNumber":"","type":"Snippet"}],"lastModifiedTime":1761257089695,"tocItem":{"chapterTitle":"Graphql","pageTitle":"Instrumentation Logging","pageMeta":{},"dirName":"graphql","fileName":"instrumentation-logging","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"code":"LiftwizardGraphQLMetricsInstrumentation","type":"InlinedCode"},{"text":" is an implementation of ","type":"SimpleText"},{"code":"Instrumentation","type":"InlinedCode"},{"text":" from ","type":"SimpleText"},{"url":"https://www.graphql-java.com/","isFile":false,"type":"Link","content":[{"text":"GraphQL Java","type":"SimpleText"}]},{"text":" that registers ","type":"SimpleText"},{"url":"https://metrics.dropwizard.io/","isFile":false,"type":"Link","content":[{"text":"performance metrics","type":"SimpleText"}]},{"text":" about data fetching with Dropwizard's MetricsRegistry.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To turn it on, either run the entire ","type":"SimpleText"},{"url":"/docs/graphql/bundle","isFile":false,"type":"Link","content":[{"code":"LiftwizardGraphQLBundle","type":"InlinedCode"}]},{"text":" or just add ","type":"SimpleText"},{"code":"LiftwizardGraphQLMetricsInstrumentation","type":"InlinedCode"},{"text":" to the list of instrumentations on your ","type":"SimpleText"},{"code":"GraphQLFactory","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"java","snippet":"GraphQLFactory factory = ...;\n\nClock clock = Clock.systemUTC();\n\nvar metricsInstrumentation = new LiftwizardGraphQLMetricsInstrumentation(this.metricRegistry, clock);\nvar loggingInstrumentation = new LiftwizardGraphQLLoggingInstrumentation();\n\nList<Instrumentation> instrumentations = List.of(metricsInstrumentation, loggingInstrumentation);\nfactory.setInstrumentations(instrumentations);","lineNumber":"","type":"Snippet"},{"id":"annotations","additionalIds":[],"level":2,"title":"Annotations","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"Next, annotate the DataFetchers that you want to monitor with ","type":"SimpleText"},{"code":"@Timed","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"@Metered","type":"InlinedCode"},{"text":", and/or ","type":"SimpleText"},{"code":"@ExceptionMetered","type":"InlinedCode"},{"text":". You can annotate either the ","type":"SimpleText"},{"code":"get()","type":"InlinedCode"},{"text":" method, or the entire fetcher class.","type":"SimpleText"}]},{"id":"timers","additionalIds":[],"level":2,"title":"Timers","type":"SubHeading"},{"type":"Paragraph","content":[{"code":"@Timed","type":"InlinedCode"},{"text":" adds three timers:","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"{DataFetcher's fully-qualified class name}.get.sync","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.graphql.field.{GraphQL Class}.{GraphQL field}.sync","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.graphql.path.{path}.sync","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"All three timers track the number of times each DataFetcher is called, and the amount of time spent in the get() method.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Although the timers measure the same thing, they may not have identical values. This would happen if the same DataFetcher is wired to multiple fields, or is reached by multiple paths through the graph.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"If your DataFetcher returns ","type":"SimpleText"},{"url":"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/CompletableFuture.html","isFile":false,"type":"Link","content":[{"code":"CompleteableFuture","type":"InlinedCode"}]},{"text":", you'll get three additional timers, with names ending in \"async\" instead of \"sync\". Rather than track the amount of time spent in ","type":"SimpleText"},{"code":"get()","type":"InlinedCode"},{"text":", these timers will track the amount of time until the ","type":"SimpleText"},{"code":"CompleteableFutures","type":"InlinedCode"},{"text":" complete.","type":"SimpleText"}]},{"id":"meters","additionalIds":[],"level":2,"title":"Meters","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"Timers ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"are","type":"SimpleText"}]},{"text":" meters, so if you want to know the number of times a fetcher is called, annotate them with ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"@Timer","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"If you annotate your DataFetcher with ","type":"SimpleText"},{"code":"@Metered","type":"InlinedCode"},{"text":", the Intrumentation will add meters that track ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"the number of items returned","type":"SimpleText"}]},{"text":" by the DataFetcher. If the ","type":"SimpleText"},{"code":"DataFetcher","type":"InlinedCode"},{"text":" returns a ","type":"SimpleText"},{"code":"Collection","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"CompleteableFuture<Collection>","type":"InlinedCode"},{"text":", the meter will increment by the size of the Collection.","type":"SimpleText"}]},{"id":"exceptionmeters","additionalIds":[],"level":2,"title":"ExceptionMeters","type":"SubHeading"},{"type":"Paragraph","content":[{"code":"@ExceptionMetered","type":"InlinedCode"},{"text":" adds meters that track the number of times the DataFetcher throws uncaught exceptions, plus the number of CompleteableFutures they return that complete exceptionally. The meters have the same names as the timers, but with the suffix \"exceptions\":","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"{DataFetcher's fully-qualified class name}.get.exceptions","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.graphql.field.{GraphQL Class}.{GraphQL field}.exceptions","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"liftwizard.graphql.path.{path}.exceptions","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"code":"LiftwizardGraphQLMetricsInstrumentation","type":"InlinedCode"},{"text":" lives in the ","type":"SimpleText"},{"code":"liftwizard-graphql-instrumentation-metrics","type":"InlinedCode"},{"text":" module.","type":"SimpleText"}]},{"lang":"xml","snippet":"<dependency>\n    <groupId>io.liftwizard</groupId>\n    <artifactId>liftwizard-graphql-instrumentation-metrics</artifactId>\n</dependency>","lineNumber":"","type":"Snippet"}],"lastModifiedTime":1761257089695,"tocItem":{"chapterTitle":"Graphql","pageTitle":"Instrumentation Metrics","pageMeta":{},"dirName":"graphql","fileName":"instrumentation-metrics","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"code":"LiftwizardAsyncDataFetcher","type":"InlinedCode"},{"text":" is an enhanced alternative to ","type":"SimpleText"},{"code":"AsyncDataFetcher","type":"InlinedCode"},{"text":" from ","type":"SimpleText"},{"url":"https://www.graphql-java.com/","isFile":false,"type":"Link","content":[{"text":"GraphQL Java","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Both have the ability to wrap a synchronous ","type":"SimpleText"},{"code":"DataFetcher","type":"InlinedCode"},{"text":" together with an ","type":"SimpleText"},{"code":"Executor","type":"InlinedCode"},{"text":", and return ","type":"SimpleText"},{"code":"CompleteableFuture","type":"InlinedCode"},{"text":"s that execute on the ","type":"SimpleText"},{"code":"Executor","type":"InlinedCode"},{"text":". ","type":"SimpleText"},{"code":"LiftwizardAsyncDataFetcher","type":"InlinedCode"},{"text":" also copies slf4j's ","type":"SimpleText"},{"url":"http://www.slf4j.org/manual.html#mdc","isFile":false,"type":"Link","content":[{"text":"Mapped Diagnostic Context","type":"SimpleText"}]},{"text":" to the background tasks, and restores the MDC when each task completes.","type":"SimpleText"}]},{"lang":"java","snippet":"builder.dataFetcher(\n        \"fieldName\",\n        LiftwizardAsyncDataFetcher.async(dataFetcher, executor));","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"When using Dropwizard, the executor should come from its environment.","type":"SimpleText"}]},{"lang":"java","snippet":"ExecutorService executorService = environment\n        .lifecycle()\n        .executorService(\"my-data-fetcher-%d\")\n        .maxThreads(maxThreads)\n        .build();","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"code":"LiftwizardAsyncDataFetcher","type":"InlinedCode"},{"text":" lives in the ","type":"SimpleText"},{"code":"liftwizard-graphql-data-fetcher-async","type":"InlinedCode"},{"text":" module.","type":"SimpleText"}]},{"lang":"xml","snippet":"<dependency>\n    <groupId>io.liftwizard</groupId>\n    <artifactId>liftwizard-graphql-data-fetcher-async</artifactId>\n</dependency>","lineNumber":"","type":"Snippet"}],"lastModifiedTime":1761257089695,"tocItem":{"chapterTitle":"Graphql","pageTitle":"Data Fetcher Async","pageMeta":{},"dirName":"graphql","fileName":"data-fetcher-async","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"When using ","type":"SimpleText"},{"url":"https://github.com/goldmansachs/reladomo","isFile":false,"type":"Link","content":[{"text":"Reladomo","type":"SimpleText"}]},{"text":", queries are usually expressed using its code-generated Finder language.","type":"SimpleText"}]},{"lang":"java","snippet":"Operation operation = MyTypeFinder.optionalString().eq(\"value\")\n    .and(MyTypeFinder.optionalInteger().eq(4));\n\nMyTypeList mithraList = MyTypeFinder.findMany(operation);","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"In some situations, it can be useful to have a more dynamic way of expressing queries.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"That's where ","type":"SimpleText"},{"code":"ReladomoOperationCompiler","type":"InlinedCode"},{"text":" comes in. It can take a String and compile it into a Reladomo ","type":"SimpleText"},{"url":"https://www.mvndoc.com/c/com.goldmansachs.reladomo/reladomo/com/gs/fw/finder/Operation.html","isFile":false,"type":"Link","content":[{"text":"Operation","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"In this example, ","type":"SimpleText"},{"code":"this.stringProperty = \"value\" & this.integerProperty = 4","type":"InlinedCode"},{"text":" is the equivalent query.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"This can be used for dynamic ad-hoc queries, and combines well with ","type":"SimpleText"},{"url":"/docs/graphql/bundle","isFile":false,"type":"Link","content":[{"text":"Liftwizard's GraphQL features","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]},{"lang":"java","snippet":"MyTypeFinder finder        = MyTypeFinder.getFinderInstance();\nvar          operationText = \"this.stringProperty = \\\"value\\\" & this.integerProperty = 4\";\nvar          compiler      = new ReladomoOperationCompiler();\nOperation    operation     = compiler.compile(finder, operationText);\nMyTypeList   mithraList    = MyTypeFinder.findMany(operation);","lineNumber":"","type":"Snippet"},{"id":"compiling-tostring-representation","additionalIds":[],"level":2,"title":"Compiling toString() representation","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"The syntax closely matches the ","type":"SimpleText"},{"code":"toString()","type":"InlinedCode"},{"text":" representation of Reladomo's Operations, with a little added flexibility. In general, you can call ","type":"SimpleText"},{"code":"operation.toString()","type":"InlinedCode"},{"text":" and compile the output to get back an equivalent Operation.","type":"SimpleText"}]},{"lang":"java","snippet":"Operation operation     = ...;\nString    operationText = operation.toString();\nOperation recompiled    = compiler.compile(finder, operationText);\nassertThat(recompiled, is(operation));","lineNumber":"","type":"Snippet"},{"id":"error-messages","additionalIds":[],"level":2,"title":"Error messages","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"The compiler is designed to give helpful error messages on inputs that parse but don't compile.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"For example, running the compiler on ","type":"SimpleText"},{"code":"this.invalidAttributeName = \"Value\"","type":"InlinedCode"},{"text":" might throw an error like:","type":"SimpleText"}]},{"lang":"text","snippet":"Could not find attribute 'invalidAttributeName' on type 'MyType' in this.invalidAttributeName = \"Value\". Valid attributes: [idProperty, stringProperty, integerProperty, longProperty, doubleProperty, floatProperty, booleanProperty, instantProperty, localDateProperty, createdById, createdOn, lastUpdatedById, systemFrom, systemTo]","lineNumber":"","wrap":true,"type":"Snippet"},{"id":"flexible-syntax","additionalIds":[],"level":2,"title":"Flexible syntax","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"The compiler allows some flexibility in the syntax.","type":"SimpleText"}]},{"table":{"columns":[{"title":"toString()"},{"title":"Alternatives"}],"data":[[[{"type":"Paragraph","content":[{"code":"&","type":"InlinedCode"}]}],[{"type":"Paragraph","content":[{"code":"&&","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"and","type":"InlinedCode"}]}]],[[{"type":"Paragraph","content":[{"code":"|","type":"InlinedCode"}]}],[{"type":"Paragraph","content":[{"code":"||","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"or","type":"InlinedCode"}]}]],[[{"type":"Paragraph","content":[{"code":"<class name>","type":"InlinedCode"}]}],[{"type":"Paragraph","content":[{"code":"this","type":"InlinedCode"}]}]],[[{"type":"Paragraph","content":[{"code":"lower","type":"InlinedCode"}]}],[{"type":"Paragraph","content":[{"code":"toLowerCase","type":"InlinedCode"}]}]],[[{"type":"Paragraph","content":[{"code":"abs","type":"InlinedCode"}]}],[{"type":"Paragraph","content":[{"code":"absoluteValue","type":"InlinedCode"}]}]],[[{"type":"Paragraph","content":[{"code":"=","type":"InlinedCode"}]}],[{"type":"Paragraph","content":[{"code":"==","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"eq","type":"InlinedCode"}]}]],[[{"type":"Paragraph","content":[{"code":"!=","type":"InlinedCode"}]}],[{"type":"Paragraph","content":[{"code":"not eq","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"notEq","type":"InlinedCode"}]}]],[[{"type":"Paragraph","content":[{"code":">","type":"InlinedCode"}]}],[{"type":"Paragraph","content":[{"code":"greaterThan","type":"InlinedCode"}]}]],[[{"type":"Paragraph","content":[{"code":">=","type":"InlinedCode"}]}],[{"type":"Paragraph","content":[{"code":"greaterThanEquals","type":"InlinedCode"}]}]],[[{"type":"Paragraph","content":[{"code":"<","type":"InlinedCode"}]}],[{"type":"Paragraph","content":[{"code":"lessThan","type":"InlinedCode"}]}]],[[{"type":"Paragraph","content":[{"code":"<=","type":"InlinedCode"}]}],[{"type":"Paragraph","content":[{"code":"lessThanEquals","type":"InlinedCode"}]}]],[[{"type":"Paragraph","content":[{"code":"not in","type":"InlinedCode"}]}],[{"type":"Paragraph","content":[{"code":"notIn","type":"InlinedCode"}]}]],[[{"type":"Paragraph","content":[{"code":"not startsWith","type":"InlinedCode"}]}],[{"type":"Paragraph","content":[{"code":"notStartsWith","type":"InlinedCode"}]}]],[[{"type":"Paragraph","content":[{"code":"not endsWith","type":"InlinedCode"}]}],[{"type":"Paragraph","content":[{"code":"notEndsWith","type":"InlinedCode"}]}]],[[{"type":"Paragraph","content":[{"code":"not contains","type":"InlinedCode"}]}],[{"type":"Paragraph","content":[{"code":"notContains","type":"InlinedCode"}]}]],[[{"type":"Paragraph","content":[{"code":"not wildCardEquals","type":"InlinedCode"}]}],[{"type":"Paragraph","content":[{"code":"wildCardNotEquals","type":"InlinedCode"}]}]],[[{"type":"Paragraph","content":[{"code":"is null","type":"InlinedCode"}]}],[{"type":"Paragraph","content":[{"code":"== null","type":"InlinedCode"}]}]],[[{"type":"Paragraph","content":[{"code":"is not null","type":"InlinedCode"}]}],[{"type":"Paragraph","content":[{"code":"!= null","type":"InlinedCode"}]}]],[[{"type":"Paragraph","content":[{"code":"all of <class name}","type":"InlinedCode"}]}],[{"type":"Paragraph","content":[{"code":"all","type":"InlinedCode"}]}]]]},"type":"Table"},{"id":"complete-examples","additionalIds":[],"level":2,"title":"Complete examples","type":"SubHeading"},{"lang":"console","snippet":"# Attribute types\nthis.booleanProperty = true\nthis.integerProperty = 4\nthis.longProperty = 5\nthis.floatProperty = 6.6\nthis.doubleProperty = 7.7\nthis.dateProperty = \"2010-12-31\"\nthis.timeProperty = \"2010-12-31T23:59:00.0Z\"\nthis.stringProperty = \"Value\"\nthis.system = \"2010-12-31T23:59:00.0Z\"\n\n# Conjunctions\nthis.booleanProperty = true & this.integerProperty = 4\nthis.booleanProperty = true && this.integerProperty = 4\nthis.booleanProperty = true and this.integerProperty = 4\nthis.booleanProperty = true | this.integerProperty = 4\nthis.booleanProperty = true || this.integerProperty = 4\nthis.booleanProperty = true or this.integerProperty = 4\n\n# Equality operators\nthis.stringProperty = \"Value\"\nthis.stringProperty != \"Value\"\nthis.stringProperty is null\nthis.stringProperty == null\nthis.stringProperty is not null\nthis.stringProperty != null\nthis.stringProperty in [\"Value\", \"Value2\", null]\nthis.stringProperty not in [\"Value\", \"Value2\", null]\n\n# String operators\nthis.stringProperty endsWith \"Value\"\nthis.stringProperty contains \"Value\"\nthis.stringProperty startsWith \"Value\"\nthis.stringProperty wildCardEquals \"Value?\"\nthis.stringProperty not endsWith \"Value\"\nthis.stringProperty not contains \"Value\"\nthis.stringProperty not startsWith \"Value\"\nthis.stringProperty not wildCardEquals \"Value?\"\n\n# Numeric operators\nthis.stringProperty > \"Value\"\nthis.stringProperty >= \"Value\"\nthis.stringProperty < \"Value\"\nthis.stringProperty <= \"Value\"\n\n# Functions / derived attributes\ntoLowerCase(this.stringProperty) = \"value\"\nsubstring(this.stringProperty, 2, 3) = \"value\"\nsubstring(toLowerCase(this.stringProperty), 2, 3) = \"value\"\n\n# Flexible number literals\nthis.floatProperty = 42.0f\nthis.floatProperty = 42.0d\nthis.floatProperty = 42\nthis.doubleProperty = 42.0f\nthis.doubleProperty = 42.0d\nthis.doubleProperty = 42\nthis.longProperty = 10_000_000_000\nthis.integerProperty = 1_000_000_000\n\n# Number / date functions / derived attributes\nabs(this.integerProperty) = 1\n\nyear(this.timeProperty) = 1999\nmonth(this.timeProperty) = 12\ndayOfMonth(this.timeProperty) = 31\nyear(this.dateProperty) = 1999\nmonth(this.dateProperty) = 12\ndayOfMonth(this.dateProperty) = 31\n\n# Relationships\nthis.target.value = \"value\"\nthis.target exists\nthis.target not exists\nthis.target { RelatedType.source.value = \"value\" } not exists\n\n# Edge points\nthis.system equalsEdgePoint","lineNumber":"","type":"Snippet"}],"lastModifiedTime":1761257089696,"tocItem":{"chapterTitle":"Reladomo","pageTitle":"Reladomo Operation Compiler","pageMeta":{},"dirName":"reladomo","fileName":"reladomo-operation-compiler","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Dropwizard provides an interface called ","type":"SimpleText"},{"code":"ManagedDataSource","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"java","snippet":"public interface ManagedDataSource extends DataSource, Managed {\n\n}","title":"io.dropwizard.db.ManagedDataSource","entry":"ManagedDataSource","anchorId":"iodropwizarddbmanageddatasource","type":"Snippet"},{"type":"Paragraph","content":[{"text":"It's just a ","type":"SimpleText"},{"code":"io.dropwizard.lifecycle.Managed","type":"InlinedCode"},{"text":" and a ","type":"SimpleText"},{"code":"javax.sql.DataSource","type":"InlinedCode"},{"text":". It's a ","type":"SimpleText"},{"code":"DataSource","type":"InlinedCode"},{"text":" with start/stop lifecycle methods.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"ManagedDataSource","type":"InlinedCode"},{"text":" works well when you have one of them. When you have multiple data sources, it can be difficult to tie them together through configuration. For example, if you use Liquibase for migrations, ","type":"SimpleText"},{"url":"https://www.dropwizard.io/en/latest/manual/migrations.html#support-for-adding-multiple-migration-bundles","isFile":false,"type":"Link","content":[{"text":"you'd need to write code","type":"SimpleText"}]},{"text":" to tie specific migrations to specific data sources; it cannot be done through configuration alone.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Liftwizard provides ","type":"SimpleText"},{"code":"NamedDataSource","type":"InlinedCode"},{"text":", which is a ","type":"SimpleText"},{"code":"ManagedDataSource","type":"InlinedCode"},{"text":" with a name. ","type":"SimpleText"},{"url":"/docs/database/liquibase-migrations","isFile":false,"type":"Link","content":[{"text":"Other Liftwizard bundles","type":"SimpleText"}]},{"text":" expect ","type":"SimpleText"},{"code":"NamedDataSource","type":"InlinedCode"},{"text":"s to be configured, and refer to them by name in their own configuration. In the liquibase example, we could tie specific migrations to specific data sources through configuration alone.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Different named data sources can refer to different databases, or the same database configured different ways. In the following example, we have one data source for Postgres, and three data sources to connect to h2; over the network, in-memory, and on disk.","type":"SimpleText"}]},{"title":"example.json5","include":"$['absent', 'dataSources']","data":{"dataSources":[{"name":"h2-mem","driverClass":"com.p6spy.engine.spy.P6SpyDriver","user":"sa","password":"","url":"jdbc:p6spy:h2:mem:;NON_KEYWORDS=USER"},{"name":"h2-tcp","driverClass":"com.p6spy.engine.spy.P6SpyDriver","user":"sa","password":"","url":"jdbc:p6spy:h2:tcp://localhost:9092/liftwizard-app-h2;NON_KEYWORDS=USER"},{"name":"h2-file","driverClass":"com.p6spy.engine.spy.P6SpyDriver","user":"sa","password":"","url":"jdbc:p6spy:h2:file:./target/h2db/liftwizard-app-h2;NON_KEYWORDS=USER"},{"name":"postgres","driverClass":"org.postgresql.Driver","readOnlyByDefault":false,"user":"${JDBC_DATABASE_USERNAME}","password":"${JDBC_DATABASE_PASSWORD}","url":"${JDBC_DATABASE_URL}"}]},"highlightValues":["root.dataSources[0].name","root.dataSources[1].name","root.dataSources[2].name","root.dataSources[3].name"],"highlightKeys":[],"anchorId":"examplejson5","type":"Json"},{"type":"Paragraph","content":[{"text":"To use named data sources, start by changing the Configuration class to implement ","type":"SimpleText"},{"code":"NamedDataSourceFactoryProvider","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"java","snippet":"public class HelloWorldConfiguration\n        extends Configuration\n        implements NamedDataSourceProvider // , ... other interfaces\n{\n    // ...\n}","lineNumber":"","title":"HelloWorldConfiguration.java","anchorId":"helloworldconfigurationjava","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Add a field with type ","type":"SimpleText"},{"code":"NamedDataSourcesFactory","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"java","snippet":"@JsonUnwrapped\nprivate @Valid @NotNull NamedDataSourcesFactory namedDataSourcesFactory = new NamedDataSourcesFactory();","title":"HelloWorldConfiguration.java field","surroundedBy":"// include-namedDataSourcesFactory","anchorId":"helloworldconfigurationjava-field","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Add the getter/setter required by the interface.","type":"SimpleText"}]},{"lang":"java","snippet":"@Override\n@JsonProperty(\"dataSources\")\n@JsonUnwrapped\npublic NamedDataSourcesFactory getNamedDataSourcesFactory() {\n    return this.namedDataSourcesFactory;\n}\n@JsonProperty(\"dataSources\")\n@JsonUnwrapped\npublic void setNamedDataSourcesFactory(NamedDataSourcesFactory namedDataSourcesFactory) {\n    this.namedDataSourcesFactory = namedDataSourcesFactory;\n}","title":"HelloWorldConfiguration.java methods","entry":["getNamedDataSourcesFactory","setNamedDataSourcesFactory"],"anchorId":"helloworldconfigurationjava-methods","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Now we can use the named data sources in the configuration of other bundles. For example, we use the data source named ","type":"SimpleText"},{"code":"h2-tcp","type":"InlinedCode"},{"text":" in the liquibase configuration.","type":"SimpleText"}]},{"title":"example.json5","include":"$['absent', 'liquibase']","data":{"liquibase":{"enabled":true,"dataSourceMigrations":[{"dataSourceName":"h2-tcp","migrationFileName":"migrations.xml","migrationFileLocation":"classpath","contexts":[]}],"dryRun":false}},"highlightValues":["root.liquibase.dataSourceMigrations[0].dataSourceName"],"highlightKeys":[],"anchorId":"examplejson5-3","type":"Json"}],"lastModifiedTime":1761257089695,"tocItem":{"chapterTitle":"Database","pageTitle":"Named Data Source","pageMeta":{},"dirName":"database","fileName":"named-data-source","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Dropwizard ships with a ","type":"SimpleText"},{"url":"https://www.dropwizard.io/en/latest/manual/migrations.html","isFile":false,"type":"Link","content":[{"text":"dropwizard-migrations","type":"SimpleText"}]},{"text":" bundle.","type":"SimpleText"}]},{"type":"BlockQuote","content":[{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"dropwizard-migrations","type":"InlinedCode"},{"text":" module provides you with a wrapper for ","type":"SimpleText"},{"url":"https://www.liquibase.org/","isFile":false,"type":"Link","content":[{"text":"Liquibase","type":"SimpleText"}]},{"text":" database refactoring.","type":"SimpleText"}]}]},{"type":"Paragraph","content":[{"text":"The built-in bundle provides Dropwizard Commands, for a command line interface to run migrations. It does ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"not","type":"SimpleText"}]},{"text":" provide a way to run migrations on application startup. That's where Liftwizard comes in.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To run migrations with Dropwizard, you run a command like ","type":"SimpleText"},{"code":"java -jar hello-world.jar db migrate helloworld.yml","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To run migrations with Liftwizard, you run the usual ","type":"SimpleText"},{"code":"server","type":"InlinedCode"},{"text":" command, and Liftwizard will run migrations on startup.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"There are pros and cons of tying migrations to application startup. The main pros are that you don't have to remember to run migrations, and that they apply to embedded databases in tests. The main con is that migrations can take a long time, and you may not want to block application startup.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To turn it on, add ","type":"SimpleText"},{"code":"LiftwizardLiquibaseMigrationBundle","type":"InlinedCode"},{"text":" to the list of registered bundles.","type":"SimpleText"}]},{"lang":"java","snippet":"@Override\npublic void initialize(Bootstrap<HelloWorldConfiguration> bootstrap)\n{\n    // ...\n    bootstrap.addBundle(new LiftwizardLiquibaseMigrationBundle());\n    // ...\n}","lineNumber":"","title":"HelloWorldApplication.initialize()","anchorId":"helloworldapplicationinitialize","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Change the Configuration class to implement ","type":"SimpleText"},{"code":"LiquibaseMigrationFactoryProvider","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"java","snippet":"public class HelloWorldConfiguration\n        extends Configuration\n        implements LiquibaseMigrationFactoryProvider // , ... other interfaces\n{\n    // ...\n}","lineNumber":"","title":"HelloWorldConfiguration.java","anchorId":"helloworldconfigurationjava","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Add a field with type ","type":"SimpleText"},{"code":"LiquibaseMigrationFactory","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"java","snippet":"private @Valid @NotNull LiquibaseMigrationFactory liquibaseMigrationFactory = new LiquibaseMigrationFactory();","title":"HelloWorldConfiguration.java field","surroundedBy":"// include-liquibaseMigrationFactory","anchorId":"helloworldconfigurationjava-field","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Add the getter/setter required by the interface.","type":"SimpleText"}]},{"lang":"java","snippet":"@JsonProperty(\"liquibase\")\n@Override\npublic LiquibaseMigrationFactory getLiquibaseMigrationFactory() {\n    return this.liquibaseMigrationFactory;\n}\n@JsonProperty(\"liquibase\")\npublic void setLiquibaseMigrationFactory(LiquibaseMigrationFactory liquibaseMigrationFactory) {\n    this.liquibaseMigrationFactory = liquibaseMigrationFactory;\n}","title":"HelloWorldConfiguration.java methods","entry":["getLiquibaseMigrationFactory","setLiquibaseMigrationFactory"],"anchorId":"helloworldconfigurationjava-methods","type":"Snippet"},{"id":"configuration","additionalIds":[],"level":2,"title":"Configuration","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"LiftwizardLiquibaseMigrationBundle","type":"InlinedCode"},{"text":" requires that you're already using ","type":"SimpleText"},{"url":"/docs/database/named-data-source","isFile":false,"type":"Link","content":[{"text":"named data sources","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Add a liquibase section to your ","type":"SimpleText"},{"url":"/docs/configuration/json5-configuration","isFile":false,"type":"Link","content":[{"text":"json","type":"SimpleText"}]},{"text":" or yaml configuration.","type":"SimpleText"}]},{"title":"example.json5","include":"$['liquibase', 'absent']","data":{"liquibase":{"enabled":true,"dataSourceMigrations":[{"dataSourceName":"h2-tcp","migrationFileName":"migrations.xml","migrationFileLocation":"classpath","contexts":[]}],"dryRun":false}},"highlightValues":["root.liquibase.dataSourceMigrations[0].dataSourceName"],"highlightKeys":[],"anchorId":"configuration-examplejson5","type":"Json"},{"type":"Paragraph","content":[{"code":"dataSourceMigrations","type":"InlinedCode"},{"text":" is an array, to allow multiple migrations to different data sources.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Each dataSourceMigration's ","type":"SimpleText"},{"code":"dataSourceName","type":"InlinedCode"},{"text":" must match a dataSource's name in the ","type":"SimpleText"},{"code":"dataSources","type":"InlinedCode"},{"text":" section.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"If no ","type":"SimpleText"},{"code":"migrationFileName","type":"InlinedCode"},{"text":" is specified, ","type":"SimpleText"},{"code":"migrations.xml","type":"InlinedCode"},{"text":" is the default.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"migrationFileLocation","type":"InlinedCode"},{"text":" can be ","type":"SimpleText"},{"code":"classpath","type":"InlinedCode"},{"text":" or ","type":"SimpleText"},{"code":"filesystem","type":"InlinedCode"},{"text":". ","type":"SimpleText"},{"code":"classpath","type":"InlinedCode"},{"text":" is the default.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"contexts","type":"InlinedCode"},{"text":" are an array of Liquibase ","type":"SimpleText"},{"url":"https://docs.liquibase.com/concepts/changelogs/attributes/contexts.html","isFile":false,"type":"Link","content":[{"text":"context tags","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"With this configuration in place, migrations will run on application startup.","type":"SimpleText"}]}],"lastModifiedTime":1761257089695,"tocItem":{"chapterTitle":"Database","pageTitle":"Liquibase Migrations","pageMeta":{},"dirName":"database","fileName":"liquibase-migrations","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Liftwizard supports the dynamic configuration of ","type":"SimpleText"},{"url":"https://www.dropwizard.io/en/stable/manual/auth.html","isFile":false,"type":"Link","content":[{"text":"dropwizard-auth","type":"SimpleText"}]},{"text":" which enables using different authorization methods in production and tests, without adding conditionals - without adding any code at all. For example, we can configure impersonation authorization in tests with the following config.","type":"SimpleText"}]},{"lang":"json5","snippet":"{\n  authFilters: [\n    {\n      type: \"header\",\n      header: \"Authorization\",\n      prefix: \"Impersonation\",\n    },\n  ],\n}","lineNumber":"","type":"Snippet"},{"id":"setup","additionalIds":[],"level":2,"title":"Setup","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"To get started, add a dependency on ","type":"SimpleText"},{"code":"liftwizard-bundle-auth-filter","type":"InlinedCode"},{"text":" and add ","type":"SimpleText"},{"code":"AuthFilterBundle","type":"InlinedCode"},{"text":" to the registered bundles.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Modify the application's configuration class to implement ","type":"SimpleText"},{"code":"AuthFilterFactoryProvider","type":"InlinedCode"},{"text":" and add a dependency on ","type":"SimpleText"},{"code":"liftwizard-config-auth-filter","type":"InlinedCode"},{"text":" if it does not already extend ","type":"SimpleText"},{"code":"AbstractLiftwizardConfiguration","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"id":"test-configuration","additionalIds":[],"level":2,"title":"Test configuration","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"For tests, you'll typically want to use header-based impersonation.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Add a dependency on ","type":"SimpleText"},{"code":"liftwizard-config-auth-filter-header","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"xml","snippet":"<dependency>\n    <groupId>io.liftwizard</groupId>\n    <artifactId>liftwizard-config-auth-filter-header</artifactId>\n    <scope>test</scope>\n</dependency>","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Add an ","type":"SimpleText"},{"code":"authFilters","type":"InlinedCode"},{"text":" list to ","type":"SimpleText"},{"code":"config-test.json5","type":"InlinedCode"},{"text":" containing just one filter, of type ","type":"SimpleText"},{"code":"header","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"json5","snippet":"{\n  authFilters: [\n    {\n      type: \"header\",\n      header: \"Authorization\",\n      prefix: \"Impersonation\",\n    },\n  ],\n}","lineNumber":"","type":"Snippet"},{"id":"test-code","additionalIds":[],"level":2,"title":"Test code","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"Impersonation authorization works well in tests that uses Dropwizard test utilities, like ","type":"SimpleText"},{"code":"DropwizardAppExtension","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"LiftwizardAppExtension","type":"InlinedCode"},{"text":", or ","type":"SimpleText"},{"code":"DropwizardAppRule","type":"InlinedCode"},{"text":". There is no change to test setup code, only to the test configuration file. The test code will include headers on client requests, like this.","type":"SimpleText"}]},{"lang":"java","snippet":"@Test\nvoid smokeTest()\n{\n    Client client = this.appExtension.client();\n\n    Response response = client\n            .target(\"http://localhost:{port}/api/example\")\n            .resolveTemplate(\"port\", this.appExtension.getLocalPort())\n            .request()\n            .header(\"Authorization\", \"Impersonation User ID\")\n            .get();\n\n    // add assertions here\n}","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Whenever we use ","type":"SimpleText"},{"code":"dropwizard-auth","type":"InlinedCode"},{"text":", some of our Jersey resource methods will be authenticated. The authenticated methods will be annotated with a security annotation such as ","type":"SimpleText"},{"code":"@PermitAll","type":"InlinedCode"},{"text":". The user principal will be passed in as a parameter and annotated like ","type":"SimpleText"},{"code":"@Auth Principal principal","type":"InlinedCode"},{"text":". The header authorizer will take the string passed in the header (","type":"SimpleText"},{"code":"\"Impersonation User ID\"","type":"InlinedCode"},{"text":" in this example), remove its prefix (","type":"SimpleText"},{"code":"\"User ID\"","type":"InlinedCode"},{"text":"), and make that string accessible via ","type":"SimpleText"},{"code":"principal.getName()","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Since the header is sent on each request, we can write tests involving multiple users. For example, we can write a test that asserts:","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"User 1","type":"InlinedCode"},{"text":" can create an entry, and gets HTTP 201 Created.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"User 2","type":"InlinedCode"},{"text":" cannot edit or delete the entry, and gets HTTP 403 Forbidden.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"User 1","type":"InlinedCode"},{"text":" can edit or delete the entry, and gets HTTP 200 OK.","type":"SimpleText"}]}]}]},{"id":"production-configuration","additionalIds":[],"level":2,"title":"Production configuration","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"The production authentication filter dependencies and configuration will depend on the method of authentication used in production. For example, the configuration to use Firebase for auth would look like this.","type":"SimpleText"}]},{"lang":"json5","snippet":"{\n  authFilters: [\n    {\n      type: \"firebase\",\n      databaseUrl: \"https://example.firebaseio.com\",\n      firebaseConfig: \"${FIREBASE_CONFIG}\",\n    },\n  ],\n}","lineNumber":"","type":"Snippet"}],"lastModifiedTime":1761257089695,"tocItem":{"chapterTitle":"Auth","pageTitle":"Dynamic Authentication And Impersonation","pageMeta":{},"dirName":"auth","fileName":"dynamic-authentication-and-impersonation","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Liftwizard includes utilities for asserting that a string equals the contents of a file.","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"\"slurping\" the file into a string","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"file matching: exact string comparison","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"json matching: json comparison","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"rerecord mode","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"These utilities are implemented as JUnit 4 Rules and JUnit 5 Extensions.","type":"SimpleText"}]}],"lastModifiedTime":1761257089699,"tocItem":{"chapterTitle":"Testing","pageTitle":"Testing","pageMeta":{},"dirName":"testing","fileName":"testing","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Liftwizard includes utilities for asserting that a string equals the contents of a file.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"If your code has changed enough, it can be more convenient to re-record the test resource files, and review the changes using ","type":"SimpleText"},{"code":"git diff","type":"InlinedCode"},{"text":" rather than the test assertion errors. To enable re-record mode, set the environment variable ","type":"SimpleText"},{"code":"LIFTWIZARD_FILE_MATCH_RULE_RERECORD","type":"InlinedCode"},{"text":" to ","type":"SimpleText"},{"code":"true","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The setup is different for the JUnit 4 Rule and JUnit 5 Extension. After setup, both have the same API.","type":"SimpleText"}]},{"lang":"java","snippet":"this.fileMatchExtension.assertFileContents(expectedStringClassPathLocation, actualString);","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"If the file does not exist, or the contents do not match, an assertion error is added to an ","type":"SimpleText"},{"url":"https://junit.org/junit4/javadoc/4.12/org/junit/rules/ErrorCollector.html","isFile":false,"type":"Link","content":[{"text":"ErrorCollector","type":"SimpleText"}]},{"text":". If the ErrorCollector contains any errors, the test fails at the end with all expected/actual pairs reported together.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"If ","type":"SimpleText"},{"code":"LIFTWIZARD_FILE_MATCH_RULE_RERECORD","type":"InlinedCode"},{"text":" is set to ","type":"SimpleText"},{"code":"true","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"assertFileContents","type":"InlinedCode"},{"text":" will not emit any ","type":"SimpleText"},{"code":"AssertionErrors","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"default":"JUnit 5","tabsContent":[{"name":"JUnit 4","content":[{"lang":"java","snippet":"public class ExampleTest\n{\n    @Rule\n    public final FileMatchRule fileMatchRule = new FileMatchRule(this.getClass());\n\n    @Test\n    public void smokeTest()\n    {\n        String resourceClassPathLocation = this.getClass().getSimpleName() + \".txt\";\n        this.fileMatchRule.assertFileContents(resourceClassPathLocation, \"test content\");\n    }\n}","lineNumber":"","type":"Snippet"}]},{"name":"JUnit 5","content":[{"lang":"java","snippet":"public class ExampleTest\n{\n    @RegisterExtension\n    private final FileMatchExtension fileMatchExtension = new FileMatchExtension(this.getClass());\n\n    @Test\n    public void smokeTest()\n    {\n        String resourceClassPathLocation = this.getClass().getSimpleName() + \".txt\";\n        this.fileMatchExtension.assertFileContents(resourceClassPathLocation, \"test content\");\n    }\n}","lineNumber":"","type":"Snippet"}]}],"defaultTabIdx":1,"type":"Tabs"}],"lastModifiedTime":1761257089699,"tocItem":{"chapterTitle":"Testing","pageTitle":"Matching Files","pageMeta":{},"dirName":"testing","fileName":"matching-files","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Liftwizard includes utilities for asserting that a JSON string equals the contents of a file, using JSON equality semantics. Liftwizard delegates to ","type":"SimpleText"},{"url":"https://github.com/skyscreamer/JSONassert","isFile":false,"type":"Link","content":[{"text":"JSONassert","type":"SimpleText"}]},{"text":" for JSON comparison.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The API is similar to the ","type":"SimpleText"},{"url":"/docs/testing/matching-files","isFile":false,"type":"Link","content":[{"text":"file matching API","type":"SimpleText"}]},{"text":", and re-record mode is enabled with the same environment variable ","type":"SimpleText"},{"code":"LIFTWIZARD_FILE_MATCH_RULE_RERECORD","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The setup is different for the JUnit 4 Rule and JUnit 5 Extension. After setup, both have the same API.","type":"SimpleText"}]},{"lang":"java","snippet":"this.jsonMatchExtension.assertFileContents(expectedJsonClassPathLocation, actualJson);","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"If the file does not exist, or the contents do not match, an assertion error is added to an ","type":"SimpleText"},{"url":"https://junit.org/junit4/javadoc/4.12/org/junit/rules/ErrorCollector.html","isFile":false,"type":"Link","content":[{"text":"ErrorCollector","type":"SimpleText"}]},{"text":". If the ErrorCollector contains any errors, the test fails at the end with all expected/actual pairs reported together.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"If ","type":"SimpleText"},{"code":"LIFTWIZARD_FILE_MATCH_RULE_RERECORD","type":"InlinedCode"},{"text":" is set to ","type":"SimpleText"},{"code":"true","type":"InlinedCode"},{"text":", ","type":"SimpleText"},{"code":"assertJsonContents","type":"InlinedCode"},{"text":" will not emit any ","type":"SimpleText"},{"code":"AssertionErrors","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"default":"JUnit 5","tabsContent":[{"name":"JUnit 4","content":[{"type":"Paragraph","content":[{"code":"JsonMatchRule","type":"InlinedCode"},{"text":" works well with Dropwizard's ","type":"SimpleText"},{"url":"https://www.dropwizard.io/en/release-2.1.x/manual/testing.html#junit-4","isFile":false,"type":"Link","content":[{"code":"DropwizardAppRule","type":"InlinedCode"}]},{"text":".","type":"SimpleText"}]},{"lang":"java","snippet":"public class ExampleTest\n{\n    @Rule\n    private final DropwizardAppRule<HelloWorldConfiguration> dropwizardAppRule = new DropwizardAppRule<>(\n            ExampleApplication.class,\n            ResourceHelpers.resourceFilePath(\"config-test.json5\"));\n\n    @Rule\n    public final JsonMatchRule jsonMatchRule = new JsonMatchRule(this.getClass());\n\n    @Test\n    public void smokeTest()\n    {\n        Response actualResponse = this.dropwizardAppRule\n                .client()\n                .target(\"http://localhost:{port}/api/example\")\n                .resolveTemplate(\"port\", this.dropwizardAppRule.getLocalPort())\n                .request()\n                .get();\n\n        String actualJsonResponse = actualResponse.readEntity(String.class);\n        String expectedResponseClassPathLocation = this.getClass().getSimpleName() + \".\" + testName + \".json\";\n        this.jsonMatchRule.assertFileContents(expectedResponseClassPathLocation, actualJsonResponse);\n    }\n}","lineNumber":"","type":"Snippet"}]},{"name":"JUnit 5","content":[{"type":"Paragraph","content":[{"code":"JsonMatchExtension","type":"InlinedCode"},{"text":" works well with Dropwizard's ","type":"SimpleText"},{"url":"https://www.dropwizard.io/en/stable/manual/testing.html#junit-5","isFile":false,"type":"Link","content":[{"code":"DropwizardAppExtension","type":"InlinedCode"}]},{"text":" or Liftwizard's ","type":"SimpleText"},{"code":"LiftwizardAppExtension","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"java","snippet":"public class ExampleTest\n{\n    @RegisterExtension\n    private final LiftwizardAppExtension<?> appExtension = this.getLiftwizardAppExtension();\n\n    @RegisterExtension\n    private final JsonMatchExtension jsonMatchExtension = new JsonMatchExtension(this.getClass());\n\n    @Nonnull\n    @Override\n    private LiftwizardAppExtension<?> getLiftwizardAppExtension()\n    {\n        return new LiftwizardAppExtension<>(\n                ExampleApplication.class,\n                ResourceHelpers.resourceFilePath(\"config-test.json5\"));\n    }\n\n    @Test\n    public void smokeTest()\n    {\n        Response actualResponse = this.appExtension\n                .client()\n                .target(\"http://localhost:{port}/api/example\")\n                .resolveTemplate(\"port\", this.appExtension.getLocalPort())\n                .request()\n                .get();\n\n        String actualJsonResponse = actualResponse.readEntity(String.class);\n        String expectedResponseClassPathLocation = this.getClass().getSimpleName() + \".\" + testName + \".json\";\n        this.jsonMatchExtension.assertFileContents(expectedResponseClassPathLocation, actualJsonResponse);\n    }\n}","lineNumber":"","type":"Snippet"}]}],"defaultTabIdx":1,"type":"Tabs"}],"lastModifiedTime":1761257089699,"tocItem":{"chapterTitle":"Testing","pageTitle":"Matching Json","pageMeta":{},"dirName":"testing","fileName":"matching-json","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"There are a number of best practices that can be handled at once by inheriting from a parent pom that takes care of them all.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Liftwizard ships with several parent poms that form an inheritance hierarchy.","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"url":"/docs/maven/minimal-parent","isFile":false,"type":"Link","content":[{"code":"liftwizard-minimal-parent","type":"InlinedCode"}]},{"text":" is the most minimal parent pom. It is meant to contain uncontroversial best practices that are applicable to all projects.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"url":"/docs/maven/profile-parent","isFile":false,"type":"Link","content":[{"code":"liftwizard-profile-parent","type":"InlinedCode"}]},{"text":" is a parent pom that inherits from ","type":"SimpleText"},{"code":"liftwizard-minimal-parent","type":"InlinedCode"},{"text":" and enables several linters and validators in profiles that are off by default.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"url":"/docs/maven/bill-of-materials","isFile":false,"type":"Link","content":[{"code":"liftwizard-bom","type":"InlinedCode"}]},{"text":" is a ","type":"SimpleText"},{"url":"https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#bill-of-materials-bom-poms","isFile":false,"type":"Link","content":[{"text":"Bill of Materials (BOM)","type":"SimpleText"}]},{"text":" that exports all modules within Liftwizard.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"liftwizard-parent","type":"InlinedCode"},{"text":" is a parent pom that inherits from ","type":"SimpleText"},{"code":"liftwizard-profile-parent","type":"InlinedCode"},{"text":", selects versions of libraries related to Dropwizard applications, and includes opinionated configurations for plugins.","type":"SimpleText"}]}]}]},{"id":"learning-maven","additionalIds":[],"level":2,"title":"Learning Maven","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"Maven can be confusing due to the extent of the \"convention over configuration\" approach.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"For example, to answer \"how does maven run compilation before tests\" you would need to learn:","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Plugins which are bound and enabled by default","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"maven-surefire-plugin","type":"InlinedCode"},{"text":" is the plugin that handles tests","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"code":"maven-compiler-plugin","type":"InlinedCode"},{"text":" binds to the ","type":"SimpleText"},{"code":"compile","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"testCompile","type":"InlinedCode"},{"text":" phases. ","type":"SimpleText"},{"code":"maven-surefire-plugin","type":"InlinedCode"},{"text":" binds to the ","type":"SimpleText"},{"code":"test","type":"InlinedCode"},{"text":" phase","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"In the ","type":"SimpleText"},{"url":"https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#default-lifecycle","isFile":false,"type":"Link","content":[{"text":"lifecycle phases","type":"SimpleText"}]},{"text":" ","type":"SimpleText"},{"code":"compile","type":"InlinedCode"},{"text":" comes before ","type":"SimpleText"},{"code":"testCompile","type":"InlinedCode"},{"text":" which comes before ","type":"SimpleText"},{"code":"test","type":"InlinedCode"},{"text":".","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"None of this information appears in ","type":"SimpleText"},{"code":"pom.xml","type":"InlinedCode"},{"text":", and little of it is logged during the build.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"To make it easier to understand, ","type":"SimpleText"},{"code":"liftwizard-minimal-parent","type":"InlinedCode"},{"text":" includes region markers surrounding each plugin that label the phase that the plugin is bound to. The sections are sorted by phase.","type":"SimpleText"}]},{"lang":"xml","snippet":"<!--region Phase 22: install-->\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-install-plugin</artifactId>\n    <version>3.1.4</version>\n</plugin>\n<!--endregion Phase 22: install-->","title":"liftwizard-minimal-parent/pom.xml","surroundedBy":["region Phase 22: install"],"surroundedByKeep":true,"anchorId":"learning-maven-liftwizard-minimal-parent-pomxml","type":"Snippet"}],"lastModifiedTime":1761257089696,"tocItem":{"chapterTitle":"Maven","pageTitle":"Maven Best Practices","pageMeta":{},"dirName":"maven","fileName":"maven-best-practices","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"The most minimal parent pom is ","type":"SimpleText"},{"code":"liftwizard-minimal-parent","type":"InlinedCode"},{"text":". If you are able to accept more opinionated defaults, continue to ","type":"SimpleText"},{"url":"/docs/maven/profile-parent","isFile":false,"type":"Link","content":[{"code":"liftwizard-profile-parent","type":"InlinedCode"}]},{"text":". The minimal parent is meant to contain uncontroversial best practices that are applicable to all projects.","type":"SimpleText"}]},{"id":"usage","additionalIds":[],"title":"Usage","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Inherit from ","type":"SimpleText"},{"code":"liftwizard-minimal-parent","type":"InlinedCode"},{"text":" in your project's pom.xml:","type":"SimpleText"}]},{"lang":"xml","snippet":"<parent>\n    <groupId>io.liftwizard</groupId>\n    <artifactId>liftwizard-minimal-parent</artifactId>\n    <version>${liftwizard.version}</version>\n</parent>","lineNumber":"","type":"Snippet"}]},{"id":"what-you-will-get","additionalIds":[],"title":"What you will get","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The following sections describe the best practices that are enforced by ","type":"SimpleText"},{"code":"liftwizard-minimal-parent","type":"InlinedCode"},{"text":". You will not need to configure these in your project's pom.xml if you inherit from ","type":"SimpleText"},{"code":"liftwizard-minimal-parent","type":"InlinedCode"},{"text":".","type":"SimpleText"}]}]},{"id":"resource-encodings","additionalIds":[],"title":"Resource encodings","type":"Section","content":[{"type":"Paragraph","content":[{"text":"If you encounter a warning like: ","type":"SimpleText"},{"code":"[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!","type":"InlinedCode"},{"text":" this is because the project does not ","type":"SimpleText"},{"url":"https://maven.apache.org/plugins/maven-resources-plugin/examples/encoding.html#specifying-a-character-encoding-scheme","isFile":false,"type":"Link","content":[{"text":"specify a character encoding scheme","type":"SimpleText"}]},{"text":" to configure ","type":"SimpleText"},{"code":"maven-resources-plugin","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"liftwizard-minimal-parent","type":"InlinedCode"},{"text":" specifies the character encoding scheme in the ","type":"SimpleText"},{"code":"properties","type":"InlinedCode"},{"text":" section of the pom.xml.","type":"SimpleText"}]},{"lang":"xml","snippet":"<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>","title":"liftwizard-minimal-parent/pom.xml","surroundedBy":["region sourceEncoding"],"anchorId":"resource-encodings-liftwizard-minimal-parent-pomxml","type":"Snippet"},{"type":"Paragraph","content":[{"text":"This will become unnecessary starting with maven 4.x.","type":"SimpleText"}]}]},{"id":"reproducible-builds","additionalIds":[],"title":"Reproducible builds","type":"Section","content":[{"type":"BlockQuote","content":[{"type":"Paragraph","content":[{"url":"https://reproducible-builds.org/","isFile":false,"type":"Link","content":[{"text":"Reproducible builds","type":"SimpleText"}]},{"text":" are a set of software development practices that create an independently-verifiable path from source to binary code. A build is ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"reproducible","type":"SimpleText"}]},{"text":" if given the same source code, build environment and build instructions, any party can recreate ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"bit-by-bit","type":"SimpleText"}]},{"text":" identical copies of all specified artifacts.","type":"SimpleText"}]}]},{"type":"Paragraph","content":[{"text":"You can ","type":"SimpleText"},{"url":"https://maven.apache.org/guides/mini/guide-reproducible-builds.html#how-do-i-configure-my-maven-build","isFile":false,"type":"Link","content":[{"text":"enable Reproducible Builds mode for plugins","type":"SimpleText"}]},{"text":" by specifying locking down the outputTimestamp property.","type":"SimpleText"}]},{"lang":"xml","snippet":"<project.build.outputTimestamp>2025-08-19T16:27:43Z</project.build.outputTimestamp>","title":"liftwizard-minimal-parent/pom.xml","surroundedBy":["region outputTimestamp"],"anchorId":"reproducible-builds-liftwizard-minimal-parent-pomxml","type":"Snippet"},{"type":"Paragraph","content":[{"text":"You will also need to run ","type":"SimpleText"},{"code":"mvn artifact:check-buildplan","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"mvn verify artifact:compare","type":"InlinedCode"},{"text":" as described in the guide to validate that builds are truly reproducible.","type":"SimpleText"}]}]},{"id":"default-goal","additionalIds":[],"title":"Default Goal","type":"Section","content":[{"type":"Paragraph","content":[{"text":"You can specify the default goal to run when you run ","type":"SimpleText"},{"code":"mvn","type":"InlinedCode"},{"text":" without any arguments.","type":"SimpleText"}]},{"lang":"xml","snippet":"<defaultGoal>verify</defaultGoal>","title":"liftwizard-minimal-parent/pom.xml","surroundedBy":["region defaultGoal"],"anchorId":"default-goal-liftwizard-minimal-parent-pomxml","type":"Snippet"},{"type":"Paragraph","content":[{"code":"verify","type":"InlinedCode"},{"text":" is a better choice than ","type":"SimpleText"},{"code":"install","type":"InlinedCode"},{"text":" in the presence of concurrent builds that may write to ","type":"SimpleText"},{"code":".m2/repository","type":"InlinedCode"},{"text":" simultaneously.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"code":"verify","type":"InlinedCode"},{"text":" is a better choice than ","type":"SimpleText"},{"code":"clean verify","type":"InlinedCode"},{"text":" because developers may build up state like test files and test databases under ","type":"SimpleText"},{"code":"target/","type":"InlinedCode"},{"text":" and may not expect them to be deleted by default. It's easy to run ","type":"SimpleText"},{"code":"mvn clean","type":"InlinedCode"},{"text":" when you need it.","type":"SimpleText"}]}]},{"id":"plugins-which-are-bound-and-enabled-by-default","additionalIds":[],"title":"Plugins which are bound and enabled by default","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Maven builds are configured by binding plugins to ","type":"SimpleText"},{"url":"https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#default-lifecycle","isFile":false,"type":"Link","content":[{"text":"lifecycle phases","type":"SimpleText"}]},{"text":". Even if you don't declare any plugins in your pom.xml, maven will still bind ","type":"SimpleText"},{"url":"https://maven.apache.org/ref/3.9.6/maven-core/default-bindings.html#plugin-bindings-for-jar-packaging","isFile":false,"type":"Link","content":[{"text":"some plugins","type":"SimpleText"}]},{"text":" to the ","type":"SimpleText"},{"url":"https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#packaging","isFile":false,"type":"Link","content":[{"text":"\"main\" phases","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"All versions of maven bind the ","type":"SimpleText"},{"url":"https://maven.apache.org/ref/3.9.6/maven-core/default-bindings.html#plugin-bindings-for-jar-packaging","isFile":false,"type":"Link","content":[{"text":"same plugins","type":"SimpleText"}]},{"text":", but newer versions of maven bind newer versions of the plugins. If you don't specify the versions of the plugins, different members of the team could be using different versions, leading to different build results on different machines.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"It's becoming more common to lock down the version of maven itself, but this wasn't always the case. If you haven't specified the versions of these plugins, ","type":"SimpleText"},{"url":"https://maven.apache.org/enforcer/enforcer-rules/requirePluginVersions.html","isFile":false,"type":"Link","content":[{"text":"maven-enforcer-plugin","type":"SimpleText"}]},{"text":" will log an error like:","type":"SimpleText"}]},{"lang":"console","snippet":"[ERROR] Rule 3: org.apache.maven.enforcer.rules.RequirePluginVersions failed with message:\n\nSome plugins are missing valid versions or depend on Maven 3.9.5 defaults (LATEST, RELEASE as plugin version are not allowed)\n   org.apache.maven.plugins:maven-compiler-plugin. \tThe version currently in use is 3.11.0 via default lifecycle bindings\n   org.apache.maven.plugins:maven-surefire-plugin. \tThe version currently in use is 3.1.2 via default lifecycle bindings\n   org.apache.maven.plugins:maven-jar-plugin. \t\tThe version currently in use is 3.3.0 via default lifecycle bindings\n   org.apache.maven.plugins:maven-clean-plugin. \tThe version currently in use is 3.2.0 via default lifecycle bindings\n   org.apache.maven.plugins:maven-install-plugin. \tThe version currently in use is 3.1.1 via default lifecycle bindings\n   org.apache.maven.plugins:maven-site-plugin. \t\tThe version currently in use is 3.12.1 via default lifecycle bindings\n   org.apache.maven.plugins:maven-resources-plugin. \tThe version currently in use is 3.3.1 via default lifecycle bindings\n   org.apache.maven.plugins:maven-deploy-plugin. \tThe version currently in use is 3.1.1 via default lifecycle bindings","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"To avoid this, we specify versions of the plugins in the parent pom.","type":"SimpleText"}]},{"lang":"xml","snippet":"<!-- These plugins are bound and enabled by default -->\n<!-- But the default version of these plugins changes with the version of maven running -->\n\n<!--region Phase 0: clean-->\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-clean-plugin</artifactId>\n    <version>3.4.1</version>\n</plugin>\n<!--endregion Phase 0: clean-->\n\n<!--region Phase 6: process-resources-->\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-resources-plugin</artifactId>\n    <version>3.3.1</version>\n</plugin>\n<!--endregion Phase 6: process-resources-->\n\n<!--region Phase 7: compile-->\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-compiler-plugin</artifactId>\n    <version>3.14.0</version>\n    <configuration>\n        <!-- https://maven.apache.org/plugins-archives/maven-compiler-plugin-3.8.1/compile-mojo.html#parameters -->\n        <!-- https://stackoverflow.com/a/44075684/ -->\n        <!-- https://docs.oracle.com/javase/9/tools/javac.htm -->\n        <!-- Generates metadata for reflection on method parameters. Stores formal parameter names of constructors and methods in the generated class file so that the method java.lang.reflect.Executable.getParameters from the Reflection API can retrieve them. -->\n        <parameters>true</parameters>\n    </configuration>\n</plugin>\n<!--endregion Phase 7: compile-->\n\n<!--region Phase 15: test-->\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-surefire-plugin</artifactId>\n    <version>3.5.2</version>\n    <!-- In maven 3.9.6 and 4.x, maven is able to auto-detect JUnit and these dependencies are not required -->\n    <!-- In maven 3.9.5, there is an internal exception inside surefire without these declared -->\n    <!-- Even with newer versions of maven, it is advantageous to keep these declarations -->\n    <!-- Without them, maven may only run JUnit 5 tests, in a project with both JUnit 4 and 5 -->\n    <dependencies>\n        <dependency>\n            <groupId>org.junit.jupiter</groupId>\n            <artifactId>junit-jupiter-engine</artifactId>\n            <version>5.10.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.platform</groupId>\n            <artifactId>junit-platform-engine</artifactId>\n            <version>1.10.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.junit.vintage</groupId>\n            <artifactId>junit-vintage-engine</artifactId>\n            <version>5.10.3</version>\n        </dependency>\n    </dependencies>\n    <configuration>\n        <!-- The compiler in the server VM now provides correct stack backtraces for all \"cold\" built-in exceptions. For performance purposes, when such an exception is thrown a few times, the method may be recompiled. After recompilation, the compiler may choose a faster tactic using preallocated exceptions that do not provide a stack trace. To disable completely the use of preallocated exceptions, use this new flag: -XX:-OmitStackTraceInFastThrow. -->\n        <!-- https://stackoverflow.com/a/4659279/ -->\n        <!-- The compiler in the server VM now provides correct stack backtraces for all \"cold\" built-in exceptions. For performance purposes, when such an exception is thrown a few times, the method may be recompiled. After recompilation, the compiler may choose a faster tactic using preallocated exceptions that do not provide a stack trace. To disable completely the use of preallocated exceptions, use this new flag: -XX:-OmitStackTraceInFastThrow. -->\n        <!-- https://stackoverflow.com/a/4659279/ -->\n        <!-- Add argLine to allow the Jacoco plugin to append without overriding the setting -->\n        <!-- https://stackoverflow.com/a/39818768/ -->\n        <argLine>-XX:-OmitStackTraceInFastThrow @{argLine}</argLine>\n        <runOrder>random</runOrder>\n        <trimStackTrace>false</trimStackTrace>\n        <systemPropertyVariables>\n            <!-- Only relevant when using AssertJ. Disables org.assertj.core.util.Throwables.removeAssertJRelatedElementsFromStackTrace() -->\n            <assertj.remove.assertj.related.elements.from.stack.trace>false</assertj.remove.assertj.related.elements.from.stack.trace>\n        </systemPropertyVariables>\n    </configuration>\n</plugin>\n<!--endregion Phase 15: test-->\n\n<!--region Phase 17: package-->\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-jar-plugin</artifactId>\n    <version>3.4.2</version>\n</plugin>\n<!--endregion Phase 17: package-->\n\n<!--region Phase 22: install-->\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-install-plugin</artifactId>\n    <version>3.1.4</version>\n</plugin>\n<!--endregion Phase 22: install-->\n\n<!--region Phase 23: deploy-->\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-deploy-plugin</artifactId>\n    <version>3.1.4</version>\n</plugin>\n<!--endregion Phase 23: deploy-->","title":"liftwizard-minimal-parent/pom.xml","surroundedBy":["region Plugins which are bound and enabled by default"],"anchorId":"plugins-which-are-bound-and-enabled-by-default-liftwizard-minimal-parent-pomxml","type":"Snippet"}]},{"id":"no-phase","additionalIds":[],"title":"No phase","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The are a number of maven plugins with goals that are designed to be run interactively, rather than being bound to a phase in the pom.xml. For example, ","type":"SimpleText"},{"code":"mvn dependency:tree","type":"InlinedCode"},{"text":" prints a visual representation of the dependencies of the project, and ","type":"SimpleText"},{"code":"mvn versions:set","type":"InlinedCode"},{"text":" updates the versions of dependencies in the pom.xml.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Any maven plugin can be run from the command line with ","type":"SimpleText"},{"code":"mvn groupId:artifactId:version:goal","type":"InlinedCode"},{"text":", and configured using command line arguments, without it appearing in the pom.xml. For example, we can run the ","type":"SimpleText"},{"url":"https://www.mojohaus.org/buildplan-maven-plugin/","isFile":false,"type":"Link","content":[{"code":"buildplan-maven-plugin","type":"InlinedCode"}]},{"text":" to list the plugins bound to each phase with this command:","type":"SimpleText"}]},{"lang":"shell","snippet":"mvn org.codehaus.mojo:buildplan-maven-plugin:2.2.2:list","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"If we configure the plugin in the pom.xml, we can run it with the syntax ","type":"SimpleText"},{"code":"mvn phase:goal","type":"InlinedCode"},{"text":" and add any configuration that would otherwise be specified with ","type":"SimpleText"},{"code":"-D","type":"InlinedCode"},{"text":" flags.","type":"SimpleText"}]},{"lang":"shell","snippet":"mvn buildplan:list","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"We configure several plugins in the parent pom.xml that are not bound to any phase.","type":"SimpleText"}]},{"lang":"xml","snippet":"<!--mvn versions:display-dependency-updates-->\n<!--mvn versions:display-plugin-updates-->\n<!--mvn versions:display-property-updates-->\n<plugin>\n    <groupId>org.codehaus.mojo</groupId>\n    <artifactId>versions-maven-plugin</artifactId>\n    <version>2.18.0</version>\n    <configuration>\n        <!-- Don't create pom.xml.versionsBackup files -->\n        <generateBackupPoms>false</generateBackupPoms>\n        <!-- Process all modules in a multi-module build, even aggregator modules without a parent-child relationship -->\n        <!-- https://stackoverflow.com/a/49246337/23572 -->\n        <processAllModules>true</processAllModules>\n    </configuration>\n</plugin>\n\n<!--mvn dependency:tree-->\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-dependency-plugin</artifactId>\n    <version>3.8.1</version>\n</plugin>\n\n<!--mvn buildplan:list-->\n<!--mvn buildplan:list-phase-->\n<!--mvn buildplan:list-plugin-->\n<plugin>\n    <groupId>org.codehaus.mojo</groupId>\n    <artifactId>buildplan-maven-plugin</artifactId>\n    <version>2.2.2</version>\n    <configuration>\n        <!-- Default value is: deploy -->\n        <tasks>\n            <task>clean</task>\n            <task>deploy</task>\n        </tasks>\n        <!-- print all phases, even if no mapping to an execution is available -->\n        <showAllPhases>true</showAllPhases>\n    </configuration>\n</plugin>\n\n<!--mvn rewrite:run-->\n<!--mvn rewrite:dryRun-->\n<plugin>\n    <groupId>org.openrewrite.maven</groupId>\n    <artifactId>rewrite-maven-plugin</artifactId>\n    <version>6.3.0</version>\n    <dependencies>\n        <dependency>\n            <groupId>org.openrewrite.recipe</groupId>\n            <artifactId>rewrite-static-analysis</artifactId>\n            <version>2.4.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrewrite.recipe</groupId>\n            <artifactId>rewrite-migrate-java</artifactId>\n            <version>3.4.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrewrite.recipe</groupId>\n            <artifactId>rewrite-testing-frameworks</artifactId>\n            <version>3.4.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrewrite.recipe</groupId>\n            <artifactId>rewrite-logging-frameworks</artifactId>\n            <version>3.4.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openrewrite.recipe</groupId>\n            <artifactId>rewrite-apache</artifactId>\n            <version>2.4.0</version>\n        </dependency>\n    </dependencies>\n</plugin>\n\n<!--mvnw wrapper:wrapper -Dmaven=4.0.0-alpha-7-->\n<plugin>\n    <artifactId>maven-wrapper-plugin</artifactId>\n    <version>3.3.2</version>\n</plugin>\n\n<!--mvn clean release:clean release:prepare -DdevelopmentVersion=1.2.3-SNAPSHOT-->\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-release-plugin</artifactId>\n    <version>3.1.1</version>\n    <configuration>\n        <!-- Default value is: invoker -->\n        <mavenExecutorId>forked-path</mavenExecutorId>\n        <!-- Automatically assign submodules the parent version -->\n        <autoVersionSubmodules>true</autoVersionSubmodules>\n        <!-- Do not `git push` changes to the upstream repository -->\n        <pushChanges>false</pushChanges>\n        <!-- Format to use when generating the tag name -->\n        <!-- Default value is: @{project.artifactId}-@{project.version} -->\n        <tagNameFormat>@{project.version}</tagNameFormat>\n    </configuration>\n</plugin>","title":"liftwizard-minimal-parent/pom.xml","surroundedBy":["region No phase"],"anchorId":"no-phase-liftwizard-minimal-parent-pomxml","type":"Snippet"}]}],"lastModifiedTime":1761257089696,"tocItem":{"chapterTitle":"Maven","pageTitle":"Minimal Parent","pageMeta":{},"dirName":"maven","fileName":"minimal-parent","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Usage","id":"usage","customAnchorId":"usage"},{"title":"What you will get","id":"what-you-will-get","customAnchorId":"what-you-will-get"},{"title":"Resource encodings","id":"resource-encodings","customAnchorId":"resource-encodings"},{"title":"Reproducible builds","id":"reproducible-builds","customAnchorId":"reproducible-builds"},{"title":"Default Goal","id":"default-goal","customAnchorId":"default-goal"},{"title":"Plugins which are bound and enabled by default","id":"plugins-which-are-bound-and-enabled-by-default","customAnchorId":"plugins-which-are-bound-and-enabled-by-default"},{"title":"No phase","id":"no-phase","customAnchorId":"no-phase"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"The \"profile\" parent pom inherits from ","type":"SimpleText"},{"url":"/docs/maven/minimal-parent","isFile":false,"type":"Link","content":[{"code":"liftwizard-minimal-parent","type":"InlinedCode"}]},{"text":". If you are able to accept more opinionated defaults, continue to ","type":"SimpleText"},{"url":"/docs/maven/bill-of-materials","isFile":false,"type":"Link","content":[{"code":"bill-of-materials","type":"InlinedCode"}]},{"text":". The profile parent contains a number of plugins you may want to enable, each wrapped individually in a maven profile.","type":"SimpleText"}]},{"id":"usage","additionalIds":[],"level":2,"title":"Usage","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"Inherit from ","type":"SimpleText"},{"code":"liftwizard-profile-parent","type":"InlinedCode"},{"text":" in your project's pom.xml:","type":"SimpleText"}]},{"lang":"xml","snippet":"<parent>\n    <groupId>io.liftwizard</groupId>\n    <artifactId>liftwizard-profile-parent</artifactId>\n    <version>${liftwizard.version}</version>\n</parent>","lineNumber":"","type":"Snippet"},{"id":"what-you-will-get","additionalIds":[],"level":2,"title":"What you will get","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"The following sections describe the profiles that are added by ","type":"SimpleText"},{"code":"liftwizard-profile-parent","type":"InlinedCode"},{"text":". You will not need to configure these in your project's pom.xml if you inherit from ","type":"SimpleText"},{"code":"liftwizard-profile-parent","type":"InlinedCode"},{"text":". You can enable the profiles using ","type":"SimpleText"},{"code":"mvn --activate-profiles <profile1>,<profile2>,...","type":"InlinedCode"}]},{"id":"active-by-default","additionalIds":[],"level":2,"title":"Active by default","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"According to ","type":"SimpleText"},{"url":"https://maven.apache.org/guides/introduction/introduction-to-profiles.html","isFile":false,"type":"Link","content":[{"text":"the docs","type":"SimpleText"}]},{"text":":","type":"SimpleText"}]},{"type":"BlockQuote","content":[{"type":"Paragraph","content":[{"text":"Profiles can be active by default using a configuration like the following in a POM.","type":"SimpleText"}]}]},{"lang":"xml","snippet":"<profiles>\n  <profile>\n    <id>profile-name</id>\n    <activation>\n      <activeByDefault>true</activeByDefault>\n    </activation>\n    ...\n  </profile>\n</profiles>","lineNumber":"","type":"Snippet"},{"type":"BlockQuote","content":[{"type":"Paragraph","content":[{"text":"This profile will automatically be active for all builds unless another profile in the same POM is activated using one of the previously described methods. All profiles that are active by default are automatically deactivated when a profile in the POM is activated on the command line or through its activation config.","type":"SimpleText"}]}]},{"type":"Paragraph","content":[{"text":"This is confusing for new users, who are first confused to find some profiles are enabled by default, and later confused to find out that they are no longer enabled. No profiles in ","type":"SimpleText"},{"code":"liftwizard-profile-parent","type":"InlinedCode"},{"text":" are active by default, and we recommend avoiding ","type":"SimpleText"},{"code":"activeByDefault","type":"InlinedCode"},{"text":" in your project's pom.xml too.","type":"SimpleText"}]},{"id":"maven-enforcer-plugin","additionalIds":[],"level":2,"title":"maven-enforcer-plugin","type":"SubHeading"},{"lang":"xml","snippet":"<profile>\n    <id>prettier-check</id>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.hubspot.maven.plugins</groupId>\n                <artifactId>prettier-maven-plugin</artifactId>\n                <version>0.22</version>\n                <configuration>\n                    <prettierJavaVersion>2.7.4</prettierJavaVersion>\n                    <printWidth>120</printWidth>\n                    <tabWidth>4</tabWidth>\n                    <nodePath>node</nodePath>\n                    <npmPath>npm</npmPath>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>check</goal>\n                        </goals>\n                        <phase>validate</phase>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</profile>\n\n<profile>\n    <id>prettier-apply</id>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.hubspot.maven.plugins</groupId>\n                <artifactId>prettier-maven-plugin</artifactId>\n                <version>0.22</version>\n                <configuration>\n                    <prettierJavaVersion>2.7.4</prettierJavaVersion>\n                    <printWidth>120</printWidth>\n                    <tabWidth>4</tabWidth>\n                    <nodePath>node</nodePath>\n                    <npmPath>npm</npmPath>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>write</goal>\n                        </goals>\n                        <phase>validate</phase>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</profile>\n\n<profile>\n    <id>spotless-check</id>\n\n    <properties>\n        <spotless.check.skip>false</spotless.check.skip>\n    </properties>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>check</goal>\n                        </goals>\n                        <phase>validate</phase>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</profile>\n\n<profile>\n    <id>spotless-apply</id>\n\n    <properties>\n        <spotless.check.skip>false</spotless.check.skip>\n    </properties>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>apply</goal>\n                        </goals>\n                        <phase>verify</phase>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</profile>\n\n<profile>\n    <id>spotless-java</id>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <configuration>\n                    <formats>\n                        <format>\n                            <toggleOffOn />\n                            <includes>\n                                <include>**/*.java</include>\n                            </includes>\n                            <trimTrailingWhitespace />\n                            <endWithNewline />\n                        </format>\n                    </formats>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</profile>\n\n<profile>\n    <id>spotless-formats</id>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <configuration>\n                    <formats>\n                        <format>\n                            <toggleOffOn />\n                            <includes>\n                                <include>.gitattributes</include>\n                                <include>.gitignore</include>\n                            </includes>\n                            <trimTrailingWhitespace />\n                            <endWithNewline />\n                            <indent>\n                                <tabs>true</tabs>\n                                <spacesPerTab>4</spacesPerTab>\n                            </indent>\n                        </format>\n                    </formats>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</profile>\n\n<profile>\n    <id>spotless-java-sort-imports</id>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <configuration>\n                    <java>\n                        <toggleOffOn>\n                            <off>@formatter:off</off>\n                            <on>@formatter:on</on>\n                        </toggleOffOn>\n\n                        <importOrder>\n                            <!-- use an empty string for all the imports not specified explicitly, '|' to join group without blank line, and '\\#` prefix for static imports. -->\n                            <order>java,javax,,\\#java|\\#javax,\\#</order>\n                        </importOrder>\n\n                        <removeUnusedImports />\n                    </java>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</profile>\n\n<profile>\n    <id>spotless-java-unused-imports</id>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <configuration>\n                    <java>\n                        <toggleOffOn>\n                            <off>@formatter:off</off>\n                            <on>@formatter:on</on>\n                        </toggleOffOn>\n\n                        <removeUnusedImports />\n                    </java>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</profile>\n\n<profile>\n    <id>spotless-prettier-java</id>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <configuration>\n                    <java>\n                        <toggleOffOn>\n                            <off>@formatter:off</off>\n                            <on>@formatter:on</on>\n                        </toggleOffOn>\n\n                        <prettier>\n                            <devDependencies>\n                                <prettier>3.3.2</prettier>\n                                <prettier-plugin-java>2.7.4</prettier-plugin-java>\n                            </devDependencies>\n                            <config>\n                                <tabWidth>4</tabWidth>\n                                <printWidth>120</printWidth>\n                                <parser>java</parser>\n                                <plugins>prettier-plugin-java</plugins>\n                            </config>\n                        </prettier>\n                    </java>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</profile>\n\n<profile>\n    <id>spotless-prettier-java-sort-imports</id>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <configuration>\n                    <java>\n                        <toggleOffOn>\n                            <off>@formatter:off</off>\n                            <on>@formatter:on</on>\n                        </toggleOffOn>\n\n                        <prettier>\n                            <devDependencies>\n                                <prettier>3.3.2</prettier>\n                                <prettier-plugin-java>2.7.4</prettier-plugin-java>\n                            </devDependencies>\n                            <config>\n                                <tabWidth>4</tabWidth>\n                                <printWidth>120</printWidth>\n                                <parser>java</parser>\n                                <plugins>prettier-plugin-java</plugins>\n                            </config>\n                        </prettier>\n\n                        <importOrder>\n                            <!-- use an empty string for all the imports not specified explicitly, '|' to join group without blank line, and '\\#` prefix for static imports. -->\n                            <order>java,javax,,\\#java|\\#javax,\\#</order>\n                        </importOrder>\n\n                        <removeUnusedImports />\n                    </java>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</profile>\n\n<profile>\n    <id>spotless-google-java-format</id>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <configuration>\n                    <java>\n                        <toggleOffOn>\n                            <off>@formatter:off</off>\n                            <on>@formatter:on</on>\n                        </toggleOffOn>\n\n                        <googleJavaFormat>\n                            <version>1.22.0</version>\n                            <style>AOSP</style>\n                            <reflowLongStrings>false</reflowLongStrings>\n                            <reorderImports>true</reorderImports>\n                        </googleJavaFormat>\n                    </java>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</profile>\n\n<profile>\n    <id>spotless-java-cleanthat</id>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <configuration>\n                    <java>\n                        <toggleOffOn>\n                            <off>@formatter:off</off>\n                            <on>@formatter:on</on>\n                        </toggleOffOn>\n\n                        <!-- Cleanthat will refactor code, but it may break style: apply it before formatter -->\n                        <cleanthat />\n                    </java>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</profile>\n\n<profile>\n    <id>spotless-antlr</id>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <configuration>\n                    <antlr4>\n                        <toggleOffOn />\n\n                        <antlr4Formatter />\n                    </antlr4>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</profile>\n\n<profile>\n    <id>spotless-sql</id>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <configuration>\n                    <sql>\n                        <toggleOffOn />\n\n                        <includes>\n                            <include>**/*.sql</include>\n                        </includes>\n\n                        <excludes>\n                            <exclude>**/target/**/*.sql</exclude>\n                        </excludes>\n\n                        <prettier>\n                            <devDependencies>\n                                <prettier-plugin-sql>0.18.1</prettier-plugin-sql>\n                            </devDependencies>\n                            <config>\n                                <plugins>prettier-plugin-sql</plugins>\n                            </config>\n                        </prettier>\n                    </sql>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</profile>\n\n<profile>\n    <id>spotless-pom</id>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <configuration>\n                    <pom>\n                        <toggleOffOn />\n\n                        <sortPom>\n                            <expandEmptyElements>false</expandEmptyElements>\n                            <spaceBeforeCloseEmptyElement>true</spaceBeforeCloseEmptyElement>\n                            <keepBlankLines>true</keepBlankLines>\n                            <nrOfIndentSpace>4</nrOfIndentSpace>\n\n                            <!-- Sort order of elements: https://github.com/Ekryd/sortpom/wiki/PredefinedSortOrderProfiles-->\n                            <predefinedSortOrder>recommended_2008_06</predefinedSortOrder>\n\n                            <!-- Custom sort order of elements: https://raw.githubusercontent.com/Ekryd/sortpom/master/sorter/src/main/resources/custom_1.xml -->\n                            <sortOrderFile />\n                        </sortPom>\n                    </pom>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</profile>\n\n<profile>\n    <id>spotless-markdown</id>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <configuration>\n                    <markdown>\n                        <toggleOffOn />\n\n                        <includes>\n                            <include>**/*.md</include>\n                        </includes>\n\n                        <excludes>\n                            <exclude>**/target/**/*.md</exclude>\n                            <exclude>**/src/main/resources/archetype-resources/**/*.md</exclude>\n                        </excludes>\n\n                        <flexmark />\n                    </markdown>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</profile>\n\n<profile>\n    <id>spotless-json</id>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <configuration>\n                    <json>\n                        <toggleOffOn />\n\n                        <includes>\n                            <include>**/*.json5</include>\n                        </includes>\n\n                        <excludes>\n                            <exclude>.*/**/*.json5</exclude>\n                            <exclude>**/target/**/*.json5</exclude>\n                            <exclude>**/archetype-resources/**/*.json5</exclude>\n                        </excludes>\n\n                        <prettier>\n                            <config>\n                                <singleQuote>false</singleQuote>\n                            </config>\n                        </prettier>\n                    </json>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</profile>\n\n<profile>\n    <id>spotless-yaml</id>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.diffplug.spotless</groupId>\n                <artifactId>spotless-maven-plugin</artifactId>\n                <configuration>\n                    <yaml>\n                        <toggleOffOn />\n\n                        <includes>\n                            <include>**/*.yaml</include>\n                            <include>**/*.yml</include>\n                        </includes>\n\n                        <excludes>\n                            <exclude>**/target/**/*.yaml</exclude>\n                            <exclude>**/target/**/*.yml</exclude>\n                            <exclude>**/src/main/resources/archetype-resources/**/*.yml</exclude>\n                            <exclude>**/src/main/resources/archetype-resources/**/*.yaml</exclude>\n                        </excludes>\n\n                        <prettier>\n                            <config>\n                                <singleQuote>false</singleQuote>\n                            </config>\n                        </prettier>\n                    </yaml>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</profile>","title":"liftwizard-profile-parent/pom.xml","surroundedBy":["region Phase 1: validate"],"anchorId":"maven-enforcer-plugin-liftwizard-profile-parent-pomxml","type":"Snippet"},{"type":"BlockQuote","content":[{"type":"Paragraph","content":[{"text":"The Enforcer plugin provides goals to control certain environmental constraints such as Maven version, JDK version and OS family along with many more built-in rules and user created rules.","type":"SimpleText"}]}]},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"url":"https://maven.apache.org/enforcer/enforcer-rules/dependencyConvergence.html#dependency-convergence","isFile":false,"type":"Link","content":[{"text":"dependencyConvergence","type":"SimpleText"}]},{"text":" rule requires that dependency version numbers converge. If a project has two dependencies, A and B, both depending on the same artifact, C, this rule will fail the build if A depends on a different version of C than the version of C depended on by B.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"url":"https://maven.apache.org/enforcer/enforcer-rules/requirePluginVersions.html","isFile":false,"type":"Link","content":[{"text":"requirePluginVersions","type":"SimpleText"}]},{"text":" rule enforces that all plugins have a version defined, either in the plugin or pluginManagement section of the pom or a parent pom.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"url":"https://maven.apache.org/enforcer/enforcer-rules/bannedDependencies.html","isFile":false,"type":"Link","content":[{"text":"bannedDependencies","type":"SimpleText"}]},{"text":" rule is configured to ban all loggers except Log4j 1.x and Logback.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"url":"https://maven.apache.org/enforcer/enforcer-rules/banDuplicatePomDependencyVersions.html","isFile":false,"type":"Link","content":[{"text":"banDuplicatePomDependencyVersions","type":"SimpleText"}]},{"text":" checks that there are no duplicate dependencies declared in the POM of the project. Duplicate dependencies are dependencies which have the same group id, artifact id, type and classifier.","type":"SimpleText"}]},{"id":"extra-enforcer-rules","additionalIds":[],"level":2,"title":"extra-enforcer-rules","type":"SubHeading"},{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"url":"https://www.mojohaus.org/extra-enforcer-rules/","isFile":false,"type":"Link","content":[{"code":"extra-enforcer-rules","type":"InlinedCode"},{"text":" project","type":"SimpleText"}]},{"text":" provides extra rules which are not part of the standard rule set. The ","type":"SimpleText"},{"code":"liftwizard-minimal-parent","type":"InlinedCode"},{"text":" configures ","type":"SimpleText"},{"code":"maven-enforcer-plugin","type":"InlinedCode"},{"text":" to use the ","type":"SimpleText"},{"code":"extra-enforcer-rules","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"xml","snippet":"<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-enforcer-plugin</artifactId>\n    <version>3.5.0</version>\n    <dependencies>\n        <dependency>\n            <groupId>org.codehaus.mojo</groupId>\n            <artifactId>extra-enforcer-rules</artifactId>\n            <version>1.9.0</version>\n        </dependency>\n    </dependencies>\n</plugin>","title":"liftwizard-minimal-parent/pom.xml","surroundedBy":["region Phase 1: validate"],"anchorId":"extra-enforcer-rules-liftwizard-minimal-parent-pomxml","type":"Snippet"}],"lastModifiedTime":1761257089696,"tocItem":{"chapterTitle":"Maven","pageTitle":"Profile Parent","pageMeta":{},"dirName":"maven","fileName":"profile-parent","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":null,"lastModifiedTime":1761257089696,"tocItem":{"chapterTitle":"Maven","pageTitle":"Bill Of Materials","pageMeta":{},"dirName":"maven","fileName":"bill-of-materials","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Liftwizard has built-in support for working with temporal data. In this section, we'll explore the various features of services that utilize this technology.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Note: This section is language and framework agnostic. If you’re interested in the underlying technology, Liftwizard's temporal support is built on ","type":"SimpleText"},{"url":"/docs/reladomo/reladomo-overview.md","isFile":true,"type":"Link","content":[{"text":"Reladomo","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]},{"id":"temporal-features","additionalIds":[],"title":"Temporal features","type":"Section","content":[{"type":"Paragraph","content":[{"text":"In an application with temporal data storage, data is stored along with timestamps. Here are some key features of temporal support:","type":"SimpleText"}]},{"type":"Paragraph","content":[{"url":"/docs/temporal-data/non-destructive-updates","isFile":false,"type":"Link","content":[{"text":"Non-destructive edits","type":"SimpleText"}]},{"text":": Updates and deletes ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"won't lose any information","type":"SimpleText"}]},{"text":". Old data is phased out with a timestamp, and new data is phased in at the same timestamp.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"url":"/docs/temporal-data/as-of-queries","isFile":false,"type":"Link","content":[{"text":"As-of queries","type":"SimpleText"}]},{"text":": Retrieve data as it existed at a specific ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"point in time","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"url":"/docs/temporal-data/versioning","isFile":false,"type":"Link","content":[{"text":"Versioning","type":"SimpleText"}]},{"text":": ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"Numbered","type":"SimpleText"}]},{"text":" versions of data can make working with timestamps easier. As-of queries can be performed by either timestamp or version number.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"url":"/docs/temporal-data/auditing","isFile":false,"type":"Link","content":[{"text":"Auditing","type":"SimpleText"}]},{"text":": Keep track of ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"who","type":"SimpleText"}]},{"text":" made each change, along with the data. With auditing enabled, each version has a user ID in addition to its timestamps.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"url":"/docs/temporal-data/optimistic-locking","isFile":false,"type":"Link","content":[{"text":"Optimistic locking","type":"SimpleText"}]},{"text":": Prevent multiple users from ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"accidentally discarding","type":"SimpleText"}]},{"text":" each other's work with this feature. APIs that perform edits require a version number as input, and will fail if the input version number and current version number don't match.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"url":"/docs/temporal-data/diffs","isFile":false,"type":"Link","content":[{"text":"Diff","type":"SimpleText"}]},{"text":": See the differences between data at two version numbers.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"url":"/docs/temporal-data/maker-checker-workflows","isFile":false,"type":"Link","content":[{"text":"Maker/Checker workflows","type":"SimpleText"}]},{"text":": ","type":"SimpleText"},{"type":"StrongEmphasis","content":[{"text":"Make and review changes","type":"SimpleText"}]},{"text":" before exposing them to all users. Most users view the latest ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"approved","type":"SimpleText"}]},{"text":" version of the data, while makers/checkers see the ","type":"SimpleText"},{"type":"Emphasis","content":[{"text":"latest","type":"SimpleText"}]},{"text":" version.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"In the next section, we'll walk through a ","type":"SimpleText"},{"url":"/docs/temporal-data/running-example","isFile":false,"type":"Link","content":[{"text":"running example","type":"SimpleText"}]},{"text":" that showcases these features.","type":"SimpleText"}]}]}],"lastModifiedTime":1761257089698,"tocItem":{"chapterTitle":"Temporal Data","pageTitle":"Temporal Data Overview","pageMeta":{},"dirName":"temporal-data","fileName":"temporal-data-overview","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Temporal features","id":"temporal-features","customAnchorId":"temporal-features"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Many real-life applications support temporal services. ","type":"SimpleText"},{"url":"https://stackoverflow.com/","isFile":false,"type":"Link","content":[{"text":"Stack Overflow","type":"SimpleText"}]},{"text":" supports all of the features listed in the ","type":"SimpleText"},{"url":"/docs/temporal-data/temporal-data-overview","isFile":false,"type":"Link","content":[{"text":"overview","type":"SimpleText"}]},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"In this section, we'll use ","type":"SimpleText"},{"url":"https://www.factorio.school/blueprints","isFile":false,"type":"Link","content":[{"text":"Factorio School","type":"SimpleText"}]},{"text":" as a running example. ","type":"SimpleText"},{"url":"https://www.factorio.school/","isFile":false,"type":"Link","content":[{"text":"Factorio School","type":"SimpleText"}]},{"text":" and ","type":"SimpleText"},{"url":"https://factorioprints.com/","isFile":false,"type":"Link","content":[{"text":"Factorio Prints","type":"SimpleText"}]},{"text":" are websites that lets users share designs, called ","type":"SimpleText"},{"url":"https://wiki.factorio.com/Blueprint","isFile":false,"type":"Link","content":[{"text":"blueprints","type":"SimpleText"}]},{"text":", for the video game ","type":"SimpleText"},{"url":"https://factorio.com/","isFile":false,"type":"Link","content":[{"text":"Factorio","type":"SimpleText"}]},{"text":". Liftwizard and Factorio School were both created by the ","type":"SimpleText"},{"url":"https://github.com/motlin/","isFile":false,"type":"Link","content":[{"text":"same author","type":"SimpleText"}]},{"text":" and Factorio School leverages Liftwizard's temporal support.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"In the next section, we'll create and edit a blueprint, and see how non-destructive edits work.","type":"SimpleText"}]}],"lastModifiedTime":1761257089698,"tocItem":{"chapterTitle":"Temporal Data","pageTitle":"Running Example","pageMeta":{},"dirName":"temporal-data","fileName":"running-example","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"Blueprints are created in 3 steps, starting with a test clock set at ","type":"SimpleText"},{"code":"2001-01-01","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"delimiter":".","startNumber":1,"type":"OrderedList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"At time 1 (","type":"SimpleText"},{"code":"2001-01-01","type":"InlinedCode"},{"text":"), we create an Imgur Image entry.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"At time 2 (","type":"SimpleText"},{"code":"2001-01-02","type":"InlinedCode"},{"text":"), we upload the blueprint string and receive a sha.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"At time 3 (","type":"SimpleText"},{"code":"2001-01-03","type":"InlinedCode"},{"text":"), we upload the blueprint post.","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"In this documentation, we'll focus on the third step.","type":"SimpleText"}]},{"id":"post-request-body","additionalIds":[],"title":"POST Request Body","type":"Section","content":[{"type":"Paragraph","content":[{"text":"We create a blueprint post by ","type":"SimpleText"},{"code":"POST","type":"InlinedCode"},{"text":"ing to ","type":"SimpleText"},{"code":"/api/blueprint/","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"lang":"json5","snippet":"{\n  title: \"Blueprint title\",\n  blueprintString: {\n    // The blueprintString.sha is a foreign key, pointing to the blueprint data we created at time 2.\n    sha: \"cc341849b4086ce7b1893b366b0dc8e99ce4e595\",\n  },\n  imgurImage: {\n    // The imgurImage.imgurId is a foreign key, pointing to the Imgur Image data we created at time 1.\n    imgurId: \"Imgur ID 1\",\n  },\n  descriptionMarkdown: \"Blueprint description markdown\",\n  // Blueprints can be tagged with multiple tags. Here we have a single tag, \"belt balancer\".\n  tags: [\n    {\n      // This double nesting is how many-to-many relationships are represented. This object is the BlueprintTag mapping.\n      tag: {\n        // This object is the tag. It's part of reference data that was created earlier. The (category, name) pair is the foreign key.\n        category: \"belt\",\n        name: \"balancer\",\n      },\n    },\n  ],\n}","title":"POST /api/blueprint/","commentsType":"inline","anchorId":"post-request-body-post-api-blueprint-","type":"Snippet"}]},{"id":"post-response-body","additionalIds":[],"title":"POST Response Body","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The response includes all the properties we sent, along with server-generated information.","type":"SimpleText"}]},{"lang":"json","snippet":"{\n  \"key\": \"6ed1f638-a63c-3a54-af67-ba494f27bff2\",\n  \"systemFrom\": \"2001-01-03T23:59:59Z\",\n  \"systemTo\": null,\n  \"version\": {\n    \"number\": 1,\n    \"systemFrom\": \"2001-01-03T23:59:59Z\",\n    \"systemTo\": null,\n    \"createdOn\": \"2001-01-03T23:59:59Z\",\n    \"createdBy\": {\n      \"userId\": \"User ID\"\n    },\n    \"lastUpdatedBy\": {\n      \"userId\": \"User ID\"\n    }\n  },\n  \"title\": \"Blueprint title\",\n  \"voteSummary\": {\n    \"numberOfUpvotes\": 0,\n    \"systemFrom\": \"2001-01-03T23:59:59Z\",\n    \"systemTo\": null\n  },\n  \"blueprintString\": {\n    \"sha\": \"cc341849b4086ce7b1893b366b0dc8e99ce4e595\",\n    \"createdOn\": \"2001-01-02T23:59:59Z\",\n    \"createdBy\": {\n      \"userId\": \"User ID\"\n    }\n  },\n  \"imgurImage\": {\n    \"imgurId\": \"Imgur ID 1\",\n    \"imgurType\": \"image/png\",\n    \"height\": 300,\n    \"width\": 300,\n    \"systemFrom\": \"2001-01-01T23:59:59Z\",\n    \"systemTo\": null\n  },\n  \"descriptionMarkdown\": \"Blueprint description markdown\",\n  \"tags\": [\n    {\n      \"systemFrom\": \"2001-01-03T23:59:59Z\",\n      \"systemTo\": null,\n      \"tag\": {\n        \"category\": \"belt\",\n        \"name\": \"balancer\",\n        \"ordinal\": 1,\n        \"systemFrom\": \"2000-01-01T00:00:00Z\",\n        \"systemTo\": null\n      }\n    }\n  ]\n}","title":"POST /api/blueprint/ response","highlight":[16,23,30,37,43,44],"anchorId":"post-response-body-post-api-blueprint-response","type":"Snippet"}]},{"id":"temporal-response","additionalIds":[],"title":"Temporal Response","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Here's the same response, with some temporal features labeled. These will be covered in upcoming sections.","type":"SimpleText"}]},{"lang":"json5","snippet":"{\n  // The key is generated-server side.\n  key: \"6ed1f638-a63c-3a54-af67-ba494f27bff2\",\n  // The systemFrom is the time we created the blueprint post time 3: 2001-01-03.\n  systemFrom: \"2001-01-03T23:59:59Z\",\n  // The systemTo is null, or infinity, indicating this data is current.\n  systemTo: null,\n  // The version object is covered in the section on Versioning.\n  version: {\n    number: 1,\n    systemFrom: \"2001-01-03T23:59:59Z\",\n    systemTo: null,\n    // The createdOn, createdBy, and lastUpdatedBy properties are covered in the section on Auditing.\n    createdOn: \"2001-01-03T23:59:59Z\",\n    createdBy: {\n      userId: \"User ID\",\n    },\n    lastUpdatedBy: {\n      userId: \"User ID\",\n    },\n  },\n  title: \"Blueprint title\",\n  voteSummary: {\n    numberOfUpvotes: 0,\n    systemFrom: \"2001-01-03T23:59:59Z\",\n    systemTo: null,\n  },\n  blueprintString: {\n    // The request only included blueprintString.sha, a foreign key. The response includes the whole object.\n    sha: \"cc341849b4086ce7b1893b366b0dc8e99ce4e595\",\n    // We created the blueprint data at time 2: 2001-01-02.\n    createdOn: \"2001-01-02T23:59:59Z\",\n    createdBy: {\n      userId: \"User ID\",\n    },\n  },\n  imgurImage: {\n    // The request only included the imgurImage.id, a foreign key. The response includes the whole object.\n    imgurId: \"Imgur ID 1\",\n    imgurType: \"image/png\",\n    height: 300,\n    width: 300,\n    // We created the Imugr image at time 1: 2001-01-01.\n    systemFrom: \"2001-01-01T23:59:59Z\",\n    systemTo: null,\n  },\n  descriptionMarkdown: \"Blueprint description markdown\",\n  tags: [\n    {\n      // The BlueprintTag mapping was created along with the blueprint post at time 3: 2001-01-03.\n      systemFrom: \"2001-01-03T23:59:59Z\",\n      systemTo: null,\n      tag: {\n        // The request only included tag.category and tag.name, the composite foreign key. The response includes the whole object.\n        category: \"belt\",\n        name: \"balancer\",\n        ordinal: 1,\n        // It was created a year earlier than the Blueprint.\n        systemFrom: \"2000-01-01T00:00:00Z\",\n        systemTo: null,\n      },\n    },\n  ],\n}","title":"POST /api/blueprint/ response","commentsType":"inline","anchorId":"temporal-response-post-api-blueprint-response","type":"Snippet"}]},{"id":"non-destructive-updates","additionalIds":[],"title":"Non-destructive updates","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Next, we update the blueprint by ","type":"SimpleText"},{"code":"PATCH","type":"InlinedCode"},{"text":"ing ","type":"SimpleText"},{"code":"/api/blueprint/{id}?version=1","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"title":"PATCH /api/blueprint/{id}?version=1","data":{"version":{"number":1},"title":"Edited blueprint title","descriptionMarkdown":"Edited Blueprint description markdown"},"highlightValues":[],"highlightKeys":[],"anchorId":"non-destructive-updates-patch-api-blueprint-idversion1","type":"Json"}]},{"id":"response","additionalIds":[],"title":"Response","type":"Section","content":[{"type":"Paragraph","content":[{"text":"The response includes the updated properties we sent, plus our first temporal updates.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The edits are reflected at time 4 (","type":"SimpleText"},{"code":"2001-01-04","type":"InlinedCode"},{"text":").","type":"SimpleText"}]},{"lang":"diff","snippet":" {\n   \"key\": \"6ed1f638-a63c-3a54-af67-ba494f27bff2\",\n-  \"systemFrom\": \"2001-01-03T23:59:59Z\",\n+  \"systemFrom\": \"2001-01-04T23:59:59Z\",\n   \"systemTo\": null,\n   \"version\": {\n-    \"number\": 1,\n-    \"systemFrom\": \"2001-01-03T23:59:59Z\",\n+    \"number\": 2,\n+    \"systemFrom\": \"2001-01-04T23:59:59Z\",\n     \"systemTo\": null,\n     \"createdOn\": \"2001-01-03T23:59:59Z\",\n     \"createdBy\": {\n       \"userId\": \"User ID\"\n     },\n     \"lastUpdatedBy\": {\n       \"userId\": \"User ID\"\n     }\n   },\n-  \"title\": \"Blueprint title\",\n+  \"title\": \"Edited blueprint title\",\n   \"voteSummary\": {\n     \"numberOfUpvotes\": 0,\n     \"systemFrom\": \"2001-01-03T23:59:59Z\",\n     \"systemTo\": null\n   },\n   \"blueprintString\": {\n     \"sha\": \"cc341849b4086ce7b1893b366b0dc8e99ce4e595\",\n     \"createdOn\": \"2001-01-02T23:59:59Z\",\n     \"createdBy\": {\n       \"userId\": \"User ID\"\n     }\n   },\n   \"imgurImage\": {\n     \"imgurId\": \"Imgur ID 1\",\n     \"imgurType\": \"image/png\",\n     \"height\": 300,\n     \"width\": 300,\n     \"systemFrom\": \"2001-01-01T23:59:59Z\",\n     \"systemTo\": null\n   },\n-  \"descriptionMarkdown\": \"Blueprint description markdown\",\n+  \"descriptionMarkdown\": \"Edited Blueprint description markdown\",\n   \"tags\": [\n     {\n       \"tagCategory\": \"belt\",\n       \"tagName\": \"balancer\",\n       \"systemFrom\": \"2001-01-03T23:59:59Z\",\n       \"systemTo\": null,\n       \"tag\": {\n         \"category\": \"belt\",\n         \"name\": \"balancer\",\n         \"ordinal\": 1,\n         \"systemFrom\": \"2000-01-01T00:00:00Z\",\n         \"systemTo\": null\n       }\n     }\n   ]\n }","title":"PATCH /api/blueprint/{id}?version=1 response","anchorId":"response-patch-api-blueprint-idversion1-response","type":"Snippet"}]},{"id":"as-of-query","additionalIds":[],"title":"As-of query","type":"Section","content":[{"type":"Paragraph","content":[{"text":"In the next section, we'll perform our first as-of query to prove to ourselves that no data has been lost.","type":"SimpleText"}]}]}],"lastModifiedTime":1761257089698,"tocItem":{"chapterTitle":"Temporal Data","pageTitle":"Non Destructive Updates","pageMeta":{},"dirName":"temporal-data","fileName":"non-destructive-updates","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"POST Request Body","id":"post-request-body","customAnchorId":"post-request-body"},{"title":"POST Response Body","id":"post-response-body","customAnchorId":"post-response-body"},{"title":"Temporal Response","id":"temporal-response","customAnchorId":"temporal-response"},{"title":"Non-destructive updates","id":"non-destructive-updates","customAnchorId":"non-destructive-updates"},{"title":"Response","id":"response","customAnchorId":"response"},{"title":"As-of query","id":"as-of-query","customAnchorId":"as-of-query"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"To confirm that we have not lost any data, we can perform an as-of query. We want to query the state of the blueprint at time 3 (","type":"SimpleText"},{"code":"2001-01-03","type":"InlinedCode"},{"text":"), before the non-destructive update.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"We ","type":"SimpleText"},{"code":"GET","type":"InlinedCode"},{"text":" from ","type":"SimpleText"},{"code":"/api/blueprint/{blueprintKey}?asOf={asOf}","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"We created a blueprint with key ","type":"SimpleText"},{"code":"6ed1f638-a63c-3a54-af67-ba494f27bff2","type":"InlinedCode"},{"text":" at time 3 (","type":"SimpleText"},{"code":"2001-01-03","type":"InlinedCode"},{"text":") and edited it at time 4 (","type":"SimpleText"},{"code":"2001-01-04","type":"InlinedCode"},{"text":"). We can query as-of any time in the range ","type":"SimpleText"},{"code":"[2001-01-03, 2001-01-04)","type":"InlinedCode"},{"text":". We'll use the beginning of the range: ","type":"SimpleText"},{"code":"2001-01-03","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Plugging these values into the template, we GET ","type":"SimpleText"},{"code":"/api/blueprint/6ed1f638-a63c-3a54-af67-ba494f27bff2?asOf=2001-01-03T23:59:59Z","type":"InlinedCode"}]},{"lang":"diff","snippet":" {\n   \"key\": \"6ed1f638-a63c-3a54-af67-ba494f27bff2\",\n   \"systemFrom\": \"2001-01-03T23:59:59Z\",\n-  \"systemTo\": null,\n+  \"systemTo\": \"2001-01-04T23:59:59Z\",\n   \"version\": {\n     \"number\": 1,\n     \"systemFrom\": \"2001-01-03T23:59:59Z\",\n-    \"systemTo\": null,\n+    \"systemTo\": \"2001-01-04T23:59:59Z\",\n     \"createdOn\": \"2001-01-03T23:59:59Z\",\n     \"createdBy\": {\n       \"userId\": \"User ID\"\n     },\n     \"lastUpdatedBy\": {\n       \"userId\": \"User ID\"\n     }\n   },\n   \"title\": \"Blueprint title\",\n   \"voteSummary\": {\n     \"numberOfUpvotes\": 0,\n     \"systemFrom\": \"2001-01-03T23:59:59Z\",\n     \"systemTo\": null\n   },\n   \"blueprintString\": {\n     \"sha\": \"cc341849b4086ce7b1893b366b0dc8e99ce4e595\",\n     \"createdOn\": \"2001-01-02T23:59:59Z\",\n     \"createdBy\": {\n       \"userId\": \"User ID\"\n     }\n   },\n   \"imgurImage\": {\n     \"imgurId\": \"Imgur ID 1\",\n     \"imgurType\": \"image/png\",\n     \"height\": 300,\n     \"width\": 300,\n     \"systemFrom\": \"2001-01-01T23:59:59Z\",\n     \"systemTo\": null\n   },\n   \"descriptionMarkdown\": \"Blueprint description markdown\",\n   \"tags\": [\n     {\n       \"tagCategory\": \"belt\",\n       \"tagName\": \"balancer\",\n       \"systemFrom\": \"2001-01-03T23:59:59Z\",\n       \"systemTo\": null,\n       \"tag\": {\n         \"category\": \"belt\",\n         \"name\": \"balancer\",\n         \"ordinal\": 1,\n         \"systemFrom\": \"2000-01-01T00:00:00Z\",\n         \"systemTo\": null\n       }\n     }\n   ]\n }","title":"GET /api/blueprint/{blueprintKey}?asOf=2001-01-03T23:59:59Z","commentsType":"inline","anchorId":"get-api-blueprint-blueprintkeyasof2001-01-03t235959z","type":"Snippet"},{"type":"Paragraph","content":[{"text":"The response we get from ","type":"SimpleText"},{"code":"/api/blueprint/{blueprintKey}?asOf=2001-01-03T23:59:59Z","type":"InlinedCode"},{"text":" is nearly identical to the response we would have got from ","type":"SimpleText"},{"code":"/api/blueprint/{blueprintKey}","type":"InlinedCode"},{"text":" had we run the query at time 3: ","type":"SimpleText"},{"code":"2001-01-03","type":"InlinedCode"},{"text":". This makes sense!","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"There's a small difference in the data. Some of the ","type":"SimpleText"},{"code":"systemTo","type":"InlinedCode"},{"text":" values that used to be ","type":"SimpleText"},{"code":"null","type":"InlinedCode"},{"text":" are now time 4: ","type":"SimpleText"},{"code":"2001-01-04","type":"InlinedCode"},{"text":". This illustrates an important rule of temporal data.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"All writes into the data store are immutable and append-only, except for the ","type":"SimpleText"},{"code":"systemTo","type":"InlinedCode"},{"text":" value.","type":"SimpleText"}]}]},{"id":"temporal-schema","additionalIds":[],"title":"Temporal Schema","type":"Section","content":[{"type":"Paragraph","content":[{"text":"Next we'll focus on the data store. In this example, we're using a relational database, but these concepts apply to any data store.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The schema maps closely to the json examples above, so if you're comfortable with the data, feel free to skip ahead to the queries.","type":"SimpleText"}]},{"id":"temporal-schema-blueprint-after-create","additionalIds":["blueprint-after-create"],"level":2,"title":"BLUEPRINT after create","type":"SubHeading"},{"table":{"columns":[{"title":"systemFrom","width":215,"align":"right"},{"title":"systemTo","width":215,"align":"right"},{"title":"key"},{"title":"blueprint title"},{"title":"descriptionMarkdown"},{"title":"imgurImageId"},{"title":"blueprintStringSha"}],"data":[[[{"type":"Paragraph","content":[{"text":"2001-01-03 23:59:59.0","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"9999-12-01 23:59:00.0","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"6ed1…","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"Blueprint title","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"Blueprint description markdown","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"Imgur ID 1","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"cc34…","type":"SimpleText"}]}]]],"wide":true},"type":"Table"},{"id":"temporal-schema-blueprint-after-update","additionalIds":["blueprint-after-update"],"level":2,"title":"BLUEPRINT after update","type":"SubHeading"},{"table":{"columns":[{"title":"systemFrom","width":215,"align":"right"},{"title":"systemTo","width":215,"align":"right"},{"title":"key"},{"title":"blueprint title"},{"title":"descriptionMarkdown"},{"title":"imgurImageId"},{"title":"blueprintStringSha"}],"data":[[[{"type":"Paragraph","content":[{"stroke":"red","id":"minus","type":"Icon"},{"text":" 2001-01-03 23:59:59.0","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"stroke":"green","id":"plus","type":"Icon"},{"text":" 2001-01-04 23:59:59.0","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"6ed1…","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"stroke":"red","id":"minus","type":"Icon"},{"text":" Blueprint title","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"stroke":"red","id":"minus","type":"Icon"},{"text":" Blueprint description markdown","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"Imgur ID 1","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"cc34…","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"stroke":"green","id":"plus","type":"Icon"},{"text":" 2001-01-04 23:59:59.0","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"9999-12-01 23:59:00.0","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"6ed1…","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"stroke":"green","id":"plus","type":"Icon"},{"text":" Edited blueprint title","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"stroke":"green","id":"plus","type":"Icon"},{"text":" Edited Blueprint description markdown","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"Imgur ID 1","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"cc34…","type":"SimpleText"}]}]]],"wide":true},"type":"Table"},{"id":"temporal-schema-blueprint_version-after-create","additionalIds":["blueprint_version-after-create"],"level":2,"title":"BLUEPRINT_VERSION after create","type":"SubHeading"},{"table":{"columns":[{"title":"systemFrom","width":215,"align":"right"},{"title":"systemTo","width":215,"align":"right"},{"title":"key"},{"title":"createdById"},{"title":"lastUpdatedById"},{"title":"number"},{"title":"createdOn"}],"data":[[[{"type":"Paragraph","content":[{"text":"2001-01-03 23:59:59.0","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"9999-12-01 23:59:00.0","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"6ed1…","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"User ID","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"User ID","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"1","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"2001-01-03 23:59:59.0","type":"SimpleText"}]}]]],"wide":true},"title":"BlueprintVersion","anchorId":"temporal-schema-blueprint_version-after-create-blueprintversion","type":"Table"},{"id":"temporal-schema-blueprint_version-after-update","additionalIds":["blueprint_version-after-update"],"level":2,"title":"BLUEPRINT_VERSION after update","type":"SubHeading"},{"table":{"columns":[{"title":"systemFrom","width":215,"align":"right"},{"title":"systemTo","width":215,"align":"right"},{"title":"key"},{"title":"createdById"},{"title":"lastUpdatedById"},{"title":"number"},{"title":"createdOn"}],"data":[[[{"type":"Paragraph","content":[{"stroke":"red","id":"minus","type":"Icon"},{"text":" 2001-01-03 23:59:59.0","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"stroke":"green","id":"plus","type":"Icon"},{"text":" 2001-01-04 23:59:59.0","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"6ed1…","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"User ID","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"User ID","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"stroke":"red","id":"minus","type":"Icon"},{"text":" 1","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"2001-01-03 23:59:59.0","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"stroke":"green","id":"plus","type":"Icon"},{"text":" 2001-01-04 23:59:59.0","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"9999-12-01 23:59:00.0","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"6ed1…","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"User ID","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"User ID","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"stroke":"green","id":"plus","type":"Icon"},{"text":" 2","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"2001-01-03 23:59:59.0","type":"SimpleText"}]}]]],"wide":true},"title":"BlueprintVersion","anchorId":"temporal-schema-blueprint_version-after-update-blueprintversion","type":"Table"},{"id":"temporal-schema-temporal-schema-patterns","additionalIds":["temporal-schema-patterns"],"level":2,"title":"Temporal Schema patterns","type":"SubHeading"},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"All tables have ","type":"SimpleText"},{"code":"systemFrom","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"systemTo","type":"InlinedCode"},{"text":" columns.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Old data is phased out by setting ","type":"SimpleText"},{"code":"systemTo","type":"InlinedCode"},{"text":" to now.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"New data is phased in by setting ","type":"SimpleText"},{"code":"systemFrom","type":"InlinedCode"},{"text":" to now.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"The new row's ","type":"SimpleText"},{"code":"systemFrom","type":"InlinedCode"},{"text":" and the old row's ","type":"SimpleText"},{"code":"systemTo","type":"InlinedCode"},{"text":" are set to the same value, forming a contiguous timeline.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"When several tables are edited within a transaction, the ","type":"SimpleText"},{"code":"systemFrom","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"systemTo","type":"InlinedCode"},{"text":" values are set to the same value across all tables.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Unchanged data is copied from the old row to the new row. For very wide columns that don't change frequently, it may be more efficient to split out a separate table.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"The ","type":"SimpleText"},{"code":"systemTo","type":"InlinedCode"},{"text":" value of the new row is set to ","type":"SimpleText"},{"code":"9999-12-01 23:59:00.00","type":"InlinedCode"},{"text":" to indicate that the row is still active. In json, we had used ","type":"SimpleText"},{"code":"null","type":"InlinedCode"},{"text":" to represent the infinity date.","type":"SimpleText"}]}]}]}]},{"id":"temporal-queries-in-sql","additionalIds":[],"title":"Temporal queries in SQL","type":"Section","content":[{"type":"Paragraph","content":[{"text":"As-of queries are implemented in SQL by adding temporal criteria to our ","type":"SimpleText"},{"code":"WHERE","type":"InlinedCode"},{"text":" clause.","type":"SimpleText"}]},{"lang":"sql","snippet":"select *\nfrom BLUEPRINT t0\nwhere t0.key = '6ed1f638-a63c-3a54-af67-ba494f27bff2'\n  and t0.system_from <= '2001-01-03 23:59:59.000'\n  and t0.system_to > '2001-01-03 23:59:59.000'","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Now we can see why the infinity date is represented as ","type":"SimpleText"},{"code":"9999-12-01 23:59:00.00","type":"InlinedCode"},{"text":". If we instead used ","type":"SimpleText"},{"code":"null","type":"InlinedCode"},{"text":" we'd need to add additional criteria to our WHERE clauses.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Joins that are one hop away from our main table are similar.","type":"SimpleText"}]},{"lang":"sql","snippet":"select *\nfrom BLUEPRINT_TAG t0\nwhere t0.blueprint_key = '6ed1f638-a63c-3a54-af67-ba494f27bff2'\n  and t0.system_from <= '2001-01-03 23:59:59.000'\n  and t0.system_to > '2001-01-03 23:59:59.000'","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"Joins that are two hops away from our main table are more complicated. We'll see examples of these later.","type":"SimpleText"}]},{"id":"temporal-queries-in-sql-temporal-query-patterns","additionalIds":["temporal-query-patterns"],"level":2,"title":"Temporal query patterns","type":"SubHeading"},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"We perform asOf queries by adding ","type":"SimpleText"},{"code":"where system_from <= {asOf} and system_to > {asOf}","type":"InlinedCode"},{"text":" to our ","type":"SimpleText"},{"code":"WHERE","type":"InlinedCode"},{"text":" clause.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"We add this exact came criteria to every query.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"We always ","type":"SimpleText"},{"code":"SELECT","type":"InlinedCode"},{"text":" all columns from the table. In the examples above we used ","type":"SimpleText"},{"code":"SELECT *","type":"InlinedCode"},{"text":". In production usage, it's common to list the columns explicitly.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"We never ","type":"SimpleText"},{"code":"SELECT","type":"InlinedCode"},{"text":" columns from two tables in the same query. Even in the upcoming examples of joins, we always ","type":"SimpleText"},{"code":"SELECT","type":"InlinedCode"},{"text":" from one table at a time.","type":"SimpleText"}]}]}]},{"type":"Paragraph","content":[{"text":"In the next section, we'll learn about adding versions and querying \"as of\" a version number.","type":"SimpleText"}]}]}],"lastModifiedTime":1761257089696,"tocItem":{"chapterTitle":"Temporal Data","pageTitle":"As Of Queries","pageMeta":{},"dirName":"temporal-data","fileName":"as-of-queries","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Temporal Schema","id":"temporal-schema","customAnchorId":"temporal-schema"},{"title":"Temporal queries in SQL","id":"temporal-queries-in-sql","customAnchorId":"temporal-queries-in-sql"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"text":"We've already seen version numbers in some examples. When we edited our Blueprint, the version number increased from 1 to 2.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"When querying for previous data, version numbers can be more convenient than timestamps. We'll see this in the section on querying by version.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"With versioning, we bump the version number when we edit any data within the composite. For Blueprints, this means that we bump the version number when we edit the Blueprint itself, when we replace the ImgurImage, when we replace the blueprint string, and when we add or remove tags. We'll take a closer look in the section on Composites.","type":"SimpleText"}]},{"id":"query-as-of-version","additionalIds":[],"title":"Query as-of version","type":"Section","content":[{"type":"Paragraph","content":[{"text":"As-of queries by version over rest are performed by adding a ","type":"SimpleText"},{"code":"version","type":"InlinedCode"},{"text":" query parameter to the URL.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Our template is ","type":"SimpleText"},{"code":"GET /api/blueprint/{blueprintKey}?version={version}","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Plugging in the key from our running example, and the version number 1, we GET ","type":"SimpleText"},{"code":"/api/blueprint/6ed1f638-a63c-3a54-af67-ba494f27bff2?version=1","type":"InlinedCode"}]},{"type":"Paragraph","content":[{"text":"This is similar to the as-of query by timestamp from the previous section, and the response is identical so we won't repeat it here.","type":"SimpleText"}]}]},{"id":"version-queries-in-sql","additionalIds":[],"title":"Version queries in SQL","type":"Section","content":[{"type":"Paragraph","content":[{"text":"At the SQL layer, queries by version number are implemented by starting with the version table.","type":"SimpleText"}]},{"lang":"sql","snippet":"select *\nfrom BLUEPRINT_VERSION t0\nwhere t0.key = '6ed1f638-a63c-3a54-af67-ba494f27bff2'\n  and t0.number = 1","lineNumber":"","type":"Snippet"},{"type":"Paragraph","content":[{"text":"This query returns version 1, which existed for the duration ","type":"SimpleText"},{"code":"[2001-01-03, 2001-01-04)","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"table":{"columns":[{"title":"systemFrom","width":215,"align":"right"},{"title":"systemTo","width":215,"align":"right"},{"title":"key"},{"title":"createdById"},{"title":"lastUpdatedById"},{"title":"number"},{"title":"createdOn"}],"data":[[[{"type":"Paragraph","content":[{"text":"2001-01-03 23:59:59.0","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"2001-01-04 23:59:59.0","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"6ed1…","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"User ID","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"User ID","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"1","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"2001-01-03 23:59:59.0","type":"SimpleText"}]}]],[[{"type":"Paragraph","content":[{"text":"2001-01-04 23:59:59.0","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"9999-12-01 23:59:00.0","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"6ed1…","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"User ID","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"User ID","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"2","type":"SimpleText"}]}],[{"type":"Paragraph","content":[{"text":"2001-01-03 23:59:59.0","type":"SimpleText"}]}]]],"wide":true},"title":"BlueprintVersion","anchorId":"version-queries-in-sql-blueprintversion","type":"Table"},{"type":"Paragraph","content":[{"text":"At this point we take the system_from value of ","type":"SimpleText"},{"code":"2001-01-03 23:59:59.000","type":"InlinedCode"},{"text":" and use it in our subsequent queries. The queries on all other tables are identical to the queries in the previous section.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"For example, to query the BLUEPRINT table:","type":"SimpleText"}]},{"lang":"sql","snippet":"select *\nfrom BLUEPRINT t0\nwhere t0.key = '6ed1f638-a63c-3a54-af67-ba494f27bff2'\n  and t0.system_from <= '2001-01-03 23:59:59.000'\n  and t0.system_to > '2001-01-03 23:59:59.000'","lineNumber":"","type":"Snippet"}]},{"id":"composites","additionalIds":[],"title":"Composites","type":"Section","content":[{"type":"Paragraph","content":[{"text":"In the previous example, we edited the Blueprint's title and markdown description, creating version 2.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Now we'll replace the Blueprint string, the ImgurImage, and add two more tags. We want to bump the version number just once more, to 3.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"We update the blueprint by ","type":"SimpleText"},{"code":"PATCH","type":"InlinedCode"},{"text":"ing ","type":"SimpleText"},{"code":"/api/blueprint/{id}?version=2","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"title":"PATCH /api/blueprint/{id}?version=2","data":{"version":{"number":2},"blueprintString":{"sha":"b11911083a0cf471a5156108389f9899675ccb0c"},"imgurImage":{"imgurId":"2nd Imgur ID"},"tags":[{"tag":{"category":"moderation","name":"scheduled for deletion"}},{"tag":{"category":"belt","name":"balancer"}},{"tag":{"category":"belt","name":"prioritizer"}}]},"highlightValues":[],"highlightKeys":[],"anchorId":"composites-patch-api-blueprint-idversion2","type":"Json"}]},{"id":"response","additionalIds":[],"title":"Response","type":"Section","content":[{"type":"Paragraph","content":[{"text":"As desired, we performed the several edits while bumping the version number by only one.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"In addition, all of the new ","type":"SimpleText"},{"code":"systemFrom","type":"InlinedCode"},{"text":" times are identical: ","type":"SimpleText"},{"code":"2001-01-05T23:59:59Z","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"At the SQL level, all the edits were performed in a single transaction.","type":"SimpleText"}]},{"lang":"diff","snippet":" {\n   \"key\": \"6ed1f638-a63c-3a54-af67-ba494f27bff2\",\n-  \"systemFrom\": \"2001-01-04T23:59:59Z\",\n+  \"systemFrom\": \"2001-01-05T23:59:59Z\",\n   \"systemTo\": null,\n   \"version\": {\n-    \"number\": 2,\n-    \"systemFrom\": \"2001-01-04T23:59:59Z\",\n+    \"number\": 3,\n+    \"systemFrom\": \"2001-01-05T23:59:59Z\",\n     \"systemTo\": null,\n     \"createdOn\": \"2001-01-03T23:59:59Z\",\n     \"createdBy\": {\n       \"userId\": \"User ID\"\n     },\n     \"lastUpdatedBy\": {\n       \"userId\": \"User ID\"\n     }\n   },\n   \"title\": \"Edited blueprint title\",\n   \"voteSummary\": {\n     \"numberOfUpvotes\": 0,\n     \"systemFrom\": \"2001-01-03T23:59:59Z\",\n     \"systemTo\": null\n   },\n   \"blueprintString\": {\n-    \"sha\": \"cc341849b4086ce7b1893b366b0dc8e99ce4e595\",\n-    \"createdOn\": \"2001-01-02T23:59:59Z\",\n+    \"sha\": \"b11911083a0cf471a5156108389f9899675ccb0c\",\n+    \"createdOn\": \"2001-01-03T00:00:00Z\",\n     \"createdBy\": {\n       \"userId\": \"User ID\"\n     }\n   },\n   \"imgurImage\": {\n-    \"imgurId\": \"Imgur ID 1\",\n-    \"imgurType\": \"image/png\",\n-    \"height\": 300,\n-    \"width\": 300,\n+    \"imgurId\": \"2nd Imgur ID\",\n+    \"imgurType\": \"2nd Imgur Type\",\n+    \"height\": 200,\n+    \"width\": 200,\n     \"systemFrom\": \"2001-01-01T23:59:59Z\",\n     \"systemTo\": null\n   },\n   \"descriptionMarkdown\": \"Edited Blueprint description markdown\",\n   \"tags\": [\n     {\n       \"tagCategory\": \"belt\",\n       \"tagName\": \"balancer\",\n       \"systemFrom\": \"2001-01-03T23:59:59Z\",\n       \"systemTo\": null,\n       \"tag\": {\n         \"category\": \"belt\",\n         \"name\": \"balancer\",\n         \"ordinal\": 1,\n         \"systemFrom\": \"2000-01-01T00:00:00Z\",\n         \"systemTo\": null\n       }\n+    },\n+    {\n+      \"tagCategory\": \"belt\",\n+      \"tagName\": \"prioritizer\",\n+      \"systemFrom\": \"2001-01-05T23:59:59Z\",\n+      \"systemTo\": null,\n+      \"tag\": {\n+        \"category\": \"belt\",\n+        \"name\": \"prioritizer\",\n+        \"ordinal\": 2,\n+        \"systemFrom\": \"2000-01-01T00:00:00Z\",\n+        \"systemTo\": null\n+      }\n+    },\n+    {\n+      \"tagCategory\": \"moderation\",\n+      \"tagName\": \"scheduled for deletion\",\n+      \"systemFrom\": \"2001-01-05T23:59:59Z\",\n+      \"systemTo\": null,\n+      \"tag\": {\n+        \"category\": \"moderation\",\n+        \"name\": \"scheduled for deletion\",\n+        \"ordinal\": 18,\n+        \"systemFrom\": \"2000-01-01T00:00:00Z\",\n+        \"systemTo\": null\n+      }\n     }\n   ]\n }","title":"PATCH /api/blueprint/{id}?version=2 response","anchorId":"response-patch-api-blueprint-idversion2-response","type":"Snippet"}]},{"id":"ownership-direction","additionalIds":[],"title":"Ownership direction","type":"Section","content":[{"type":"Paragraph","content":[{"code":"BlueprintTag","type":"InlinedCode"},{"text":" sits in the middle of a many-to-many relationship between ","type":"SimpleText"},{"code":"Blueprint","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"Tag","type":"InlinedCode"},{"text":". In this example, we considered ","type":"SimpleText"},{"code":"BlueprintTag","type":"InlinedCode"},{"text":" to be part of the composite making up the ","type":"SimpleText"},{"code":"Blueprint","type":"InlinedCode"},{"text":". Should we also consider it to be part of the ","type":"SimpleText"},{"code":"Tag","type":"InlinedCode"},{"text":" as well?","type":"SimpleText"}]},{"fit":true,"imageSrc":"/docs/temporal-data/factorio-nomnoml.png","timestamp":1761257089698,"shapes":[],"width":2251.0,"height":944.0,"type":"AnnotatedImage"},{"type":"Paragraph","content":[{"text":"This is our choice as application designers. In this case, it makes sense for ","type":"SimpleText"},{"code":"BlueprintTag","type":"InlinedCode"},{"text":" to be part of the ","type":"SimpleText"},{"code":"Blueprint","type":"InlinedCode"},{"text":", but not part of ","type":"SimpleText"},{"code":"Tag","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Stack Overflow makes a similar choice. ","type":"SimpleText"},{"code":"Questions","type":"InlinedCode"},{"text":" and ","type":"SimpleText"},{"code":"Tag","type":"InlinedCode"},{"text":"s are both versioned. Applying new tags to a question creates a new version of the ","type":"SimpleText"},{"code":"Question","type":"InlinedCode"},{"text":", but not the ","type":"SimpleText"},{"code":"Tag","type":"InlinedCode"},{"text":".","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"In the UML diagram above, composite relationships are denoted by black diamonds.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"Composites are subtle, so let's walk through a few examples.","type":"SimpleText"}]},{"bulletMarker":"-","tight":true,"type":"BulletList","content":[{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Editing a Blueprint's title or description creates a new version. These are properties directly on the root type.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"Adding or removing BlueprintTag mappings creates a new version. These objects live within the composite.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"BlueprintTag mappings don't have any mutable properties. If they did, editing those properties would create a new version. For example, if we persisted their relative ordering with an ordinal property, then reordering the Blueprint's tags would create a new version.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"When the Blueprint author changes their display name, this does not create a new version. The User object is not part of the composite.","type":"SimpleText"}]}]},{"type":"ListItem","content":[{"type":"Paragraph","content":[{"text":"We don't allow reassigning Blueprints to another author. If we did, repointing the author would create a new version. This works well with a temporal schema, because Blueprint.createdById would be swapped.","type":"SimpleText"}]}]}]}]}],"lastModifiedTime":1761257089699,"tocItem":{"chapterTitle":"Temporal Data","pageTitle":"Versioning","pageMeta":{},"dirName":"temporal-data","fileName":"versioning","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[{"title":"Query as-of version","id":"query-as-of-version","customAnchorId":"query-as-of-version"},{"title":"Version queries in SQL","id":"version-queries-in-sql","customAnchorId":"version-queries-in-sql"},{"title":"Composites","id":"composites","customAnchorId":"composites"},{"title":"Response","id":"response","customAnchorId":"response"},{"title":"Ownership direction","id":"ownership-direction","customAnchorId":"ownership-direction"}]}},{"type":"Page","content":[{"type":"Paragraph","content":[{"type":"StrongEmphasis","content":[{"text":"Auditing","type":"SimpleText"}]},{"text":" means tracking who performed each create and update operation.","type":"SimpleText"}]},{"type":"Paragraph","content":[{"text":"The version object is a convenient place to store this information. Each version has a createdOn timestamp, and createdBy and lastUpdatedBy fields.","type":"SimpleText"}]},{"include":"$['absent', 'version']","data":{"version":{"number":1,"systemFrom":"2001-01-03T23:59:59Z","systemTo":null,"createdOn":"2001-01-03T23:59:59Z","createdBy":{"userId":"User ID"},"lastUpdatedBy":{"userId":"User ID"}}},"highlightValues":["root.version.createdOn","root.version.createdBy","root.version.createdBy.userId","root.version.lastUpdatedBy","root.version.lastUpdatedBy.userId"],"highlightKeys":[],"type":"Json"},{"type":"Paragraph","content":[{"text":"The version table includes column createdById and lastUpdatedById that point to a user table.","type":"SimpleText"}]},{"id":"deletes","additionalIds":[],"level":2,"title":"Deletes","type":"SubHeading"}],"lastModifiedTime":1761257089696,"tocItem":{"chapterTitle":"Temporal Data","pageTitle":"Auditing","pageMeta":{},"dirName":"temporal-data","fileName":"auditing","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":null,"lastModifiedTime":1761257089698,"tocItem":{"chapterTitle":"Temporal Data","pageTitle":"Optimistic Locking","pageMeta":{},"dirName":"temporal-data","fileName":"optimistic-locking","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":null,"lastModifiedTime":1761257089696,"tocItem":{"chapterTitle":"Temporal Data","pageTitle":"Diffs","pageMeta":{},"dirName":"temporal-data","fileName":"diffs","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}},{"type":"Page","content":null,"lastModifiedTime":1761257089698,"tocItem":{"chapterTitle":"Temporal Data","pageTitle":"Maker Checker Workflows","pageMeta":{},"dirName":"temporal-data","fileName":"maker-checker-workflows","fileExtension":"md","viewOnRelativePath":null,"pageSectionIdTitles":[]}}]