on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-test-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-test-
            maven-

      - uses: actions/setup-java@v4
        with:
          java-version-file: .tool-versions
          distribution: oracle

      - run: ./mvnw verify --activate-profiles jacoco-maven-plugin

      - uses: madrapps/jacoco-report@v1.6.1
        with:
          paths: |
            ${{ github.workspace }}/**/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          update-comment: true
          min-coverage-overall: 0
          min-coverage-changed-files: 0

      - name: 'Clean Maven cache'
        run: rm -rf ~/.m2/repository/io/liftwizard

  enforcer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-enforcer-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-enforcer-
            maven-

      - uses: actions/setup-java@v4
        with:
          java-version-file: .tool-versions
          distribution: oracle

      - name: Run maven-enforcer-plugin
        run: ./mvnw verify --activate-profiles maven-enforcer-plugin -DskipTests

      - name: 'Clean Maven cache'
        run: rm -rf ~/.m2/repository/io/liftwizard

  dependency:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-dependency-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-dependency-
            maven-

      - uses: actions/setup-java@v4
        with:
          java-version-file: .tool-versions
          distribution: oracle

      - name: Run maven-dependency-plugin
        run: ./mvnw verify --activate-profiles maven-dependency-plugin -DskipTests

      - name: 'Clean Maven cache'
        run: rm -rf ~/.m2/repository/io/liftwizard

  javadoc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-javadoc-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-javadoc-
            maven-

      - uses: actions/setup-java@v4
        with:
          java-version-file: .tool-versions
          distribution: oracle

      - name: Run maven-javadoc-plugin
        run: ./mvnw verify --activate-profiles maven-javadoc-plugin -DskipTests

      - name: 'Clean Maven cache'
        run: rm -rf ~/.m2/repository/io/liftwizard

  checkstyle-semantics:
    name: checkstyle xml (semantics)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-checkstyle-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-checkstyle-
            maven-

      - uses: actions/setup-java@v4
        with:
          java-version-file: .tool-versions
          distribution: oracle

      - name: 'Install liftwizard-checkstyle module'
        run: ./mvnw install --projects liftwizard-utility/liftwizard-checkstyle

      - name: 'Produce Checkstyle XML: Semantics'
        run: ./mvnw checkstyle:check --activate-profiles 'checkstyle-semantics' -Dcheckstyle.failOnViolation=false -Dcheckstyle.failsOnError=false -Dcheckstyle.output.format=xml

      - name: 'Checkstyle GitHub Annotations: Semantics'
        uses: lcollins/checkstyle-github-action@v3.0.0
        with:
          name: 'checkstyle annotations (semantics)'
          path: '**/checkstyle-result.xml'

      - name: 'Clean Maven cache'
        run: rm -rf ~/.m2/repository/io/liftwizard

  checkstyle-semantics-strict:
    name: checkstyle xml (semantics strict)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-checkstyle-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-checkstyle-
            maven-

      - uses: actions/setup-java@v4
        with:
          java-version-file: .tool-versions
          distribution: oracle

      - name: 'Install liftwizard-checkstyle module'
        run: ./mvnw install --projects liftwizard-utility/liftwizard-checkstyle

      - name: 'Produce Checkstyle XML: Strict Semantics'
        run: ./mvnw checkstyle:check --activate-profiles 'checkstyle-semantics-strict' -Dcheckstyle.failOnViolation=false -Dcheckstyle.failsOnError=false -Dcheckstyle.output.format=xml

      - name: 'Checkstyle GitHub Annotations: Strict Semantics'
        uses: lcollins/checkstyle-github-action@v3.0.0
        with:
          name: 'checkstyle annotations (semantics strict)'
          path: '**/checkstyle-result.xml'

      - name: 'Clean Maven cache'
        run: rm -rf ~/.m2/repository/io/liftwizard

  checkstyle-formatting:
    name: checkstyle xml (formatting)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-checkstyle-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-checkstyle-
            maven-

      - uses: actions/setup-java@v4
        with:
          java-version-file: .tool-versions
          distribution: oracle

      - name: 'Install liftwizard-checkstyle module'
        run: ./mvnw install --projects liftwizard-utility/liftwizard-checkstyle

      - name: 'Produce Checkstyle XML: Formatting'
        run: ./mvnw checkstyle:check --activate-profiles 'checkstyle-formatting' -Dcheckstyle.failOnViolation=false -Dcheckstyle.failsOnError=false -Dcheckstyle.output.format=xml

      - name: 'Checkstyle GitHub Annotations: Formatting'
        uses: lcollins/checkstyle-github-action@v3.0.0
        with:
          name: 'checkstyle annotations (formatting)'
          path: '**/checkstyle-result.xml'

      - name: 'Clean Maven cache'
        run: rm -rf ~/.m2/repository/io/liftwizard

  spotless-formats:
    name: spotless (formats)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-formats-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: actions/setup-java@v4
        with:
          java-version-file: .tool-versions
          distribution: oracle

      - name: 'Spotless Check: Formats'
        run: ./mvnw verify --activate-profiles 'spotless-check,spotless-formats'

      - name: 'Clean Maven cache'
        run: rm -rf ~/.m2/repository/io/liftwizard

  spotless-java:
    name: spotless (java)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-java-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: actions/setup-java@v4
        with:
          java-version-file: .tool-versions
          distribution: oracle

      - name: 'Spotless Check: Java'
        run: ./mvnw verify --activate-profiles 'spotless-check,spotless-java'

      - name: 'Clean Maven cache'
        run: rm -rf ~/.m2/repository/io/liftwizard

  spotless-antlr:
    name: spotless (antlr)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-antlr-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: actions/setup-java@v4
        with:
          java-version-file: .tool-versions
          distribution: oracle

      - name: 'Spotless Check: Antlr'
        run: ./mvnw verify --activate-profiles 'spotless-check,spotless-antlr'

      - name: 'Clean Maven cache'
        run: rm -rf ~/.m2/repository/io/liftwizard

  spotless-sql:
    name: spotless (sql)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-sql-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: actions/setup-java@v4
        with:
          java-version-file: .tool-versions
          distribution: oracle

      - name: 'Spotless Check: Sql'
        run: ./mvnw verify --activate-profiles 'spotless-check,spotless-sql'

      - name: 'Clean Maven cache'
        run: rm -rf ~/.m2/repository/io/liftwizard

  spotless-pom:
    name: spotless (pom)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-pom-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: actions/setup-java@v4
        with:
          java-version-file: .tool-versions
          distribution: oracle

      - name: 'Spotless Check: Pom'
        run: ./mvnw verify --activate-profiles 'spotless-check,spotless-pom'

      - name: 'Clean Maven cache'
        run: rm -rf ~/.m2/repository/io/liftwizard

  spotless-markdown:
    name: spotless (markdown)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-markdown-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: actions/setup-java@v4
        with:
          java-version-file: .tool-versions
          distribution: oracle

      - name: 'Spotless Check: Markdown'
        run: ./mvnw verify --activate-profiles 'spotless-check,spotless-markdown'

      - name: 'Clean Maven cache'
        run: rm -rf ~/.m2/repository/io/liftwizard

  spotless-json:
    name: spotless (json)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-json-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: actions/setup-java@v4
        with:
          java-version-file: .tool-versions
          distribution: oracle

      - name: 'Spotless Check: Json'
        run: ./mvnw verify --activate-profiles 'spotless-check,spotless-json'

      - name: 'Clean Maven cache'
        run: rm -rf ~/.m2/repository/io/liftwizard

  spotless-yaml:
    name: spotless (yaml)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-yaml-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: actions/setup-java@v4
        with:
          java-version-file: .tool-versions
          distribution: oracle

      - name: 'Spotless Check: Yaml'
        run: ./mvnw verify --activate-profiles 'spotless-check,spotless-yaml'

      - name: 'Clean Maven cache'
        run: rm -rf ~/.m2/repository/io/liftwizard

  spotless-shell:
    name: spotless (shell)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-shell-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: actions/setup-java@v4
        with:
          java-version-file: .tool-versions
          distribution: oracle

      - name: 'Spotless Check: Shell'
        run: ./mvnw verify --activate-profiles 'spotless-check,spotless-shell'

      - name: 'Clean Maven cache'
        run: rm -rf ~/.m2/repository/io/liftwizard

  rewrite:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-rewrite-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-rewrite-
            maven-

      - uses: actions/setup-java@v4
        with:
          java-version-file: .tool-versions
          distribution: oracle

      - name: Run rewrite-maven-plugin
        run: ./mvnw install org.openrewrite.maven:rewrite-maven-plugin:dryRun --projects '!liftwizard-example' --activate-profiles rewrite-maven-plugin,rewrite-maven-plugin-dryRun -DskipTests

      - name: 'Clean Maven cache'
        run: rm -rf ~/.m2/repository/io/liftwizard

  # Check for reproducible builds with artifact:check-buildplan
  reproducible:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-reproducible-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-reproducible-
            maven-

      - uses: actions/setup-java@v4
        with:
          java-version-file: .tool-versions
          distribution: oracle

      - name: Run artifact:check-buildplan
        run: ./mvnw verify artifact:check-buildplan -DskipTests

      - name: 'Clean Maven cache'
        run: rm -rf ~/.m2/repository/io/liftwizard

  # Check if the new commits in a Pull Request contain a merge commit. If so, fail and print them out.
  forbid-merge-commits:
    runs-on: ubuntu-latest
    steps:
      - uses: motlin/forbid-merge-commits-action@main
