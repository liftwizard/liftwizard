# Jobs that run on merge_group, meaning they must pass before changes land. They also run on pull_request.

on:
  pull_request:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  GROUP_ID: "io/liftwizard"

jobs:
  maven-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - run: mvn verify

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  maven-enforcer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: Run maven-enforcer-plugin
        run: mvn verify --activate-profiles maven-enforcer-plugin -DskipTests

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  maven-dependency:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: Run maven-dependency-plugin
        run: mvn verify --activate-profiles maven-dependency-plugin -DskipTests

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  maven-javadoc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: Run maven-javadoc-plugin
        run: mvn verify --activate-profiles maven-javadoc-plugin -DskipTests

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  checkstyle-semantics:
    name: checkstyle xml (semantics)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-checkstyle-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-checkstyle-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Install liftwizard-checkstyle module"
        run: mvn install --projects liftwizard-utility/liftwizard-checkstyle

      - name: "Produce Checkstyle XML: Semantics"
        run: >
          mvn checkstyle:check
            --activate-profiles 'checkstyle-semantics'
            -Dcheckstyle.failOnViolation=false
            -Dcheckstyle.failsOnError=false
            -Dcheckstyle.output.format=sarif
            -Dcheckstyle.output.file='${project.build.directory}/checkstyle-result.sarif'

      # https://medium.com/snapp-mobile/uploading-sarif-reports-to-github-91a8001e6794
      - name: "Merge SARIF files"
        run: |
          jq -s '{ "$schema": "https://json.schemastore.org/sarif-2.1.0", "version": "2.1.0", "runs": map(.runs) | add }' ./**/target/checkstyle-result.sarif > target/merged.sarif

      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: target/merged.sarif
          # Optional category for the results
          # Used to differentiate multiple results for one commit
          category: Checkstyle Semantics

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  checkstyle-semantics-strict:
    name: checkstyle xml (semantics strict)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-checkstyle-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-checkstyle-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Install liftwizard-checkstyle module"
        run: mvn install --projects liftwizard-utility/liftwizard-checkstyle

      - name: "Produce Checkstyle XML: Strict Semantics"
        run: >
          mvn checkstyle:check
            --activate-profiles 'checkstyle-semantics-strict'
            -Dcheckstyle.failOnViolation=false
            -Dcheckstyle.failsOnError=false
            -Dcheckstyle.output.format=sarif
            -Dcheckstyle.output.file='${project.build.directory}/checkstyle-result.sarif'

      # https://medium.com/snapp-mobile/uploading-sarif-reports-to-github-91a8001e6794
      - name: "Merge SARIF files"
        run: |
          jq -s '{ "$schema": "https://json.schemastore.org/sarif-2.1.0", "version": "2.1.0", "runs": map(.runs) | add }' ./**/target/checkstyle-result.sarif > target/merged.sarif

      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: target/merged.sarif
          # Optional category for the results
          # Used to differentiate multiple results for one commit
          category: Checkstyle Semantics

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  checkstyle-formatting:
    name: checkstyle xml (formatting)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-checkstyle-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-checkstyle-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Install liftwizard-checkstyle module"
        run: mvn install --projects liftwizard-utility/liftwizard-checkstyle

      - name: "Produce Checkstyle XML: Formatting"
        run: >
          mvn checkstyle:check
            --activate-profiles 'checkstyle-formatting'
            -Dcheckstyle.failOnViolation=false
            -Dcheckstyle.failsOnError=false
            -Dcheckstyle.output.format=sarif
            -Dcheckstyle.output.file='${project.build.directory}/checkstyle-result.sarif'

      # https://medium.com/snapp-mobile/uploading-sarif-reports-to-github-91a8001e6794
      - name: "Merge SARIF files"
        run: |
          jq -s '{ "$schema": "https://json.schemastore.org/sarif-2.1.0", "version": "2.1.0", "runs": map(.runs) | add }' ./**/target/checkstyle-result.sarif > target/merged.sarif

      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: target/merged.sarif
          # Optional category for the results
          # Used to differentiate multiple results for one commit
          category: Checkstyle Formatting

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  checkstyle-formatting-strict:
    name: checkstyle xml (formatting strict)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-checkstyle-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-checkstyle-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Install liftwizard-checkstyle module"
        run: mvn install --projects liftwizard-utility/liftwizard-checkstyle

      - name: "Produce Checkstyle XML: Strict Formatting"
        run: >
          mvn checkstyle:check --activate-profiles 'checkstyle-formatting-strict'
            -Dcheckstyle.failOnViolation=false
            -Dcheckstyle.failsOnError=false
            -Dcheckstyle.output.format=sarif
            -Dcheckstyle.output.file='${project.build.directory}/checkstyle-result.sarif'

      # https://medium.com/snapp-mobile/uploading-sarif-reports-to-github-91a8001e6794
      - name: "Merge SARIF files"
        run: |
          jq -s '{ "$schema": "https://json.schemastore.org/sarif-2.1.0", "version": "2.1.0", "runs": map(.runs) | add }' ./**/target/checkstyle-result.sarif > target/merged.sarif

      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: target/merged.sarif
          # Optional category for the results
          # Used to differentiate multiple results for one commit
          category: Checkstyle Formatting

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  maven-rewrite:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-rewrite-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-rewrite-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: Run rewrite-maven-plugin
        run: mvn install org.openrewrite.maven:rewrite-maven-plugin:dryRun --projects '!liftwizard-example' --activate-profiles rewrite-maven-plugin,rewrite-maven-plugin-dryRun -DskipTests

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  # Check for reproducible builds with artifact:check-buildplan
  maven-reproducible:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: Run artifact:check-buildplan
        run: mvn verify artifact:check-buildplan -DskipTests

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-formats:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Spotless Check: Formats"
        run: |
          mvn spotless:check \
            --projects '!liftwizard-maven-build/liftwizard-minimal-parent' \
            --activate-profiles 'spotless-check,spotless-formats'

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-java-sort-imports:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Spotless Check: Java Import Order"
        run: |
          mvn spotless:check \
            --projects '!liftwizard-maven-build/liftwizard-minimal-parent' \
            --activate-profiles 'spotless-check,spotless-java-sort-imports'

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-java-unused-imports:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Spotless Check: Java Unused Imports"
        run: |
          mvn spotless:check \
            --projects '!liftwizard-maven-build/liftwizard-minimal-parent' \
            --activate-profiles 'spotless-check,spotless-java-unused-imports'

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-java-cleanthat:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Spotless Check: Java cleanthat"
        run: |
          mvn spotless:check \
            --projects '!liftwizard-maven-build/liftwizard-minimal-parent' \
            --activate-profiles 'spotless-check,spotless-java-cleanthat'

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-sql:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Spotless Check: Sql"
        run: |
          mvn spotless:check \
            --projects '!liftwizard-maven-build/liftwizard-minimal-parent' \
            --activate-profiles 'spotless-check,spotless-sql'

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-pom:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Spotless Check: Pom"
        run: |
          mvn spotless:check \
            --projects '!liftwizard-maven-build/liftwizard-minimal-parent' \
            --activate-profiles 'spotless-check,spotless-pom'

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-markdown:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Spotless Check: Markdown"
        run: |
          mvn spotless:check \
            --projects '!liftwizard-maven-build/liftwizard-minimal-parent' \
            --activate-profiles 'spotless-check,spotless-markdown'

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-json:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Spotless Check: Json"
        run: |
          mvn spotless:check \
            --projects '!liftwizard-maven-build/liftwizard-minimal-parent' \
            --activate-profiles 'spotless-check,spotless-json'

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-yaml:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Spotless Check: Yaml"
        run: |
          mvn spotless:check \
            --projects '!liftwizard-maven-build/liftwizard-minimal-parent' \
            --activate-profiles 'spotless-check,spotless-yaml'

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  reviewdog-markdownlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-markdownlint@v0.26.0
        with:
          reporter: github-pr-check
          fail_on_error: true
          filter_mode: nofilter

  reviewdog-yamllint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-yamllint@v1.20.0
        with:
          reporter: github-pr-check
          fail_on_error: true
          filter_mode: nofilter

  reviewdog-languagetool:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-languagetool@v1.20.2
        with:
          reporter: github-pr-check

  reviewdog-actionlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-actionlint@v1.64.1
        with:
          reporter: github-pr-check
          fail_on_error: true
          filter_mode: nofilter

  reviewdog-shellcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-shellcheck@v1.29.0
        with:
          reporter: github-pr-check
          fail_on_error: true
          filter_mode: nofilter
