# Jobs that run on merge_group, meaning they must pass before changes land. They also run on pull_request.

on:
  pull_request:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  GROUP_ID: "io/liftwizard"

jobs:
  maven-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - run: just test

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  maven-spotbugs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - run: just spotbugs

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  maven-errorprone:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: Add Error Prone problem matcher
        run: echo "::add-matcher::.github/errorprone.json"

      - run: just errorprone

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  maven-enforcer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: Run maven-enforcer-plugin
        run: just enforcer

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  maven-dependency:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: Run maven-dependency-plugin
        run: just dependency

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  maven-javadoc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: Run maven-javadoc-plugin
        run: just javadoc

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  checkstyle-semantics:
    name: checkstyle xml (semantics)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-checkstyle-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-checkstyle-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Produce Checkstyle XML: Semantics"
        run: just checkstyle-profile checkstyle-semantics false

      - uses: motlin/checkstyle-results@v1
        with:
          checkstyle_files: "**/checkstyle-result.xml"

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  checkstyle-semantics-strict:
    name: checkstyle xml (semantics strict)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-checkstyle-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-checkstyle-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Produce Checkstyle XML: Strict Semantics"
        run: just checkstyle-profile checkstyle-semantics-strict false

      - uses: motlin/checkstyle-results@v1
        with:
          checkstyle_files: "**/checkstyle-result.xml"

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  checkstyle-formatting:
    name: checkstyle xml (formatting)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-checkstyle-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-checkstyle-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Produce Checkstyle XML: Formatting"
        run: just checkstyle-profile checkstyle-formatting false

      - uses: motlin/checkstyle-results@v1
        with:
          checkstyle_files: "**/checkstyle-result.xml"

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  maven-rewrite:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-rewrite-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-rewrite-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: Run rewrite-maven-plugin (dry run)
        run: just rewrite-dry-run

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  # Check for reproducible builds with artifact:check-buildplan
  maven-reproducible:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: Run artifact:check-buildplan
        run: just reproducible

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-formats:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Spotless Check: Formats"
        run: just spotless formats

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-java-cleanthat:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Spotless Check: Java cleanthat"
        run: just spotless java-cleanthat

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-java:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Spotless Check: Java"
        run: just spotless java

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-prettier-java-sort-imports:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-prettier-java-sort-imports-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Spotless Check: Prettier Java (with sorted imports)"
        run: just spotless java-prettier-sort-imports

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-sql:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Spotless Check: Sql"
        run: just spotless sql

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-pom:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Spotless Check: Pom"
        run: just spotless pom

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-markdown:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Spotless Check: Markdown"
        run: just spotless markdown

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-json:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Spotless Check: Json"
        run: just spotless json

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-yaml:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: "Spotless Check: Yaml"
        run: just spotless yaml

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  reviewdog-markdownlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-markdownlint@v0.26.0
        with:
          reporter: github-pr-check
          fail_on_error: true
          filter_mode: nofilter

  reviewdog-yamllint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-yamllint@v1.20.0
        with:
          reporter: github-pr-check
          fail_on_error: true
          filter_mode: nofilter

  reviewdog-actionlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-actionlint@v1.65.0
        with:
          reporter: github-pr-check
          fail_on_error: true
          filter_mode: nofilter

  reviewdog-shellcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: reviewdog/action-shellcheck@v1.29.0
        with:
          reporter: github-pr-check
          filter_mode: nofilter

  all-checks:
    name: All checks
    needs:
      [
        maven-test,
        maven-spotbugs,
        maven-errorprone,
        maven-enforcer,
        maven-dependency,
        maven-javadoc,
        checkstyle-semantics,
        checkstyle-semantics-strict,
        checkstyle-formatting,
        maven-rewrite,
        maven-reproducible,
        spotless-formats,
        spotless-java,
        spotless-prettier-java-sort-imports,
        spotless-java-cleanthat,
        spotless-sql,
        spotless-pom,
        spotless-markdown,
        spotless-json,
        spotless-yaml,
        reviewdog-markdownlint,
        reviewdog-yamllint,
        reviewdog-actionlint,
        reviewdog-shellcheck,
      ]
    runs-on: ubuntu-latest
    steps:
      - name: All checks passed
        run: echo "All checks passed!"
