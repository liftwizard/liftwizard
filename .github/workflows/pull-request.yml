# Jobs that run on pull_request, but not on merge_group. This is useful for jobs that post comments on Pull Requests, like a code coverage report or a preview of rendered docs.

on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  GROUP_ID: "io/liftwizard"

jobs:
  maven-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          key: maven-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - run: just coverage

      - uses: madrapps/jacoco-report@v1.7.1
        with:
          paths: |
            ${{ github.workspace }}/**/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Jacoco Code Coverage"
          update-comment: true
          min-coverage-overall: 0
          min-coverage-changed-files: 0

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  # Check if the new commits in a Pull Request contain a merge commit. If so, fail and print them out.
  forbid-merge-commits:
    runs-on: ubuntu-latest
    steps:
      - uses: motlin/forbid-merge-commits-action@main

  automerge-dependabot:
    if: github.event.pull_request.user.login == 'dependabot[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Enable auto-merge for Dependabot PR
        run: gh pr merge --rebase --auto "${{ github.event.pull_request.number }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  maven-rewrite-fix:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v4
        with:
          key: maven-rewrite-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-rewrite-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"

      - name: Run rewrite-maven-plugin and commit changes
        run: |
          just rewrite-run

          if [[ -n $(git status --porcelain) ]]; then
            FIX_BRANCH="fix-${{ github.event.pull_request.number }}-rewrite"
            git switch --create $FIX_BRANCH

            git add --all
            git commit --message "Auto-fix: Apply OpenRewrite recipe changes"
            git push origin $FIX_BRANCH

            echo "OpenRewrite fixes have been pushed to the $FIX_BRANCH branch."
            exit 1
          else
            echo "No changes needed by OpenRewrite"
          fi

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-pom-fix:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-pom-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"

      - name: Run Spotless Apply for POM
        run: |
          just spotless pom

          if [[ -n $(git status --porcelain) ]]; then
            FIX_BRANCH="fix-${{ github.event.pull_request.number }}-spotless-pom"
            git switch --create $FIX_BRANCH

            git add --all
            git commit --message "Auto-fix: Apply Spotless POM formatting"
            git push origin $FIX_BRANCH

            echo "Spotless fixes have been pushed to the $FIX_BRANCH branch."
            exit 1
          else
            echo "No changes needed by Spotless POM"
          fi

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  spotless-prettier-java-sort-imports-fix:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v4
        with:
          key: maven-spotless-prettier-java-sort-imports-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-spotless-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"

      - name: Run Spotless Apply for Prettier Java with Sorted Imports
        run: |
          just spotless prettier-java-sort-imports

          if [[ -n $(git status --porcelain) ]]; then
            FIX_BRANCH="fix-${{ github.event.pull_request.number }}-spotless"
            git switch --create $FIX_BRANCH

            git add --all
            git commit --message "Auto-fix: Apply Spotless Prettier Java with Sorted Imports"
            git push origin $FIX_BRANCH

            echo "Spotless fixes have been pushed to the $FIX_BRANCH branch."
            exit 1
          else
            echo "No changes needed by Spotless"
          fi

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}

  errorprone-fix:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v4
        with:
          key: maven-errorprone-${{ hashFiles('**/pom.xml') }}
          path: ~/.m2/repository
          restore-keys: |
            maven-errorprone-
            maven-

      - uses: twosigma/maven-cache-cleaner@v1

      - uses: jdx/mise-action@v2

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"

      - name: Run Error Prone
        run: |
          just errorprone-patch

          find . -name "error-prone.patch" -type f | while read -r patch_file; do
            echo "Applying patch file: $patch_file"
            patch -p0 -u -i "$patch_file"
          done

          # Commit the changes if any files were modified
          if [[ -n $(git status --porcelain) ]]; then
            FIX_BRANCH="fix-${{ github.event.pull_request.number }}-errorprone"
            git switch --create $FIX_BRANCH

            git add --all
            git commit --message "Auto-fix: Apply Error Prone fixes"
            git push origin $FIX_BRANCH

            echo "Error Prone fixes have been pushed to the $FIX_BRANCH branch."
            exit 1
          else
            echo "No changes needed by Error Prone"
          fi

      # Remove any jars we may have created before actions/cache caches .m2
      - name: "Clean Maven cache"
        run: rm -rf ~/.m2/repository/${{ env.GROUP_ID }}
